"""
Generated from MIDL2Impacket.py
"""


from __future__ import division
from __future__ import print_function
from impacket.dcerpc.v5.ndr import *
from impacket.dcerpc.v5.dtypes import *
from impacket.dcerpc.v5.lsad import PRPC_UNICODE_STRING_ARRAY
from impacket.structure import Structure
from impacket import nt_errors
from impacket.uuid import uuidtup_to_bin
from impacket.dcerpc.v5.rpcrt import DCERPCException

DWORD64 = NDRUHYPER
__INT64 = NDRHYPER
class CONTEXT_HANDLE(NDRSTRUCT):
    align = 1
    structure = (
        ('Data', '20s=""'),
    )
HANDLE_T = CONTEXT_HANDLE
class RPC_STRING(NDRSTRUCT):
    structure = (
        ('Length','<H=0'),
        ('MaximumLength','<H=0'),
        ('Data',LPSTR),
    )

    def __setitem__(self, key, value):
        if key == 'Data' and isinstance(value, NDR) is False:
            self['Length'] = len(value)
            self['MaximumLength'] = len(value)
        return NDRSTRUCT.__setitem__(self, key, value)

    def dump(self, msg = None, indent = 0):
        if msg is None: msg = self.__class__.__name__
        if msg != '':
            print("%s" % msg, end=' ')

        if isinstance(self.fields['Data'] , NDRPOINTERNULL):
            print(" NULL", end=' ')
        elif self.fields['Data']['ReferentID'] == 0:
            print(" NULL", end=' ')
        else:
            return self.fields['Data'].dump('',indent)

class PRPC_STRING(NDRPOINTER):
    referent = (
        ('Data', RPC_STRING),
    )

UNSIGNED_SHORT = NDRUSHORT
UNSIGNED_CHAR = NDRCHAR
UNSIGNED_LONG = NDRULONG
UNSIGNED_INT = NDRULONG
UNSIGNED___INT64 = NDRUHYPER
SIGNED___INT64 = NDRHYPER
SIGNED_INT = NDRSHORT
SIGNED_LONG = NDRLONG
SIGNED_CHAR = NDRCHAR
SIGNED_SHORT = NDRSHORT
CONST_WCHAR_T = WSTR
CONST_CHAR = NDRCHAR
CONST_INT = NDRLONG
CONST_VOID = CONTEXT_HANDLE
CONST_LONG = NDRLONG
VOID = CONTEXT_HANDLE
__INT3264 = NDRLONG
UNSIGNED___INT3264 = NDRULONG
CONST_UNSIGNED_LONG = NDRULONG
UNSIGNED_HYPER = NDRUHYPER
HYPER = NDRHYPER

#################################################################################

#"ms-dtyp.idl"

#################################################################################

#################################################################################

#TYPEDEFS

#################################################################################

WCHAR_T = UNSIGNED_SHORT
ADCONNECTION_HANDLE = VOID
BOOL = INT
PBOOL = INT
LPBOOL = INT
BYTE = UNSIGNED_CHAR
PBYTE = UNSIGNED_CHAR
LPBYTE = UNSIGNED_CHAR
BOOLEAN = BYTE
PBOOLEAN = BYTE
WCHAR = WCHAR_T
PWCHAR = WCHAR_T
BSTR = WCHAR
CHAR = CHAR
PCHAR = CHAR
DOUBLE = DOUBLE
DWORD = UNSIGNED_LONG
PDWORD = UNSIGNED_LONG
LPDWORD = UNSIGNED_LONG
DWORD32 = UNSIGNED_INT
DWORD64 = UNSIGNED___INT64
PDWORD64 = UNSIGNED___INT64
ULONGLONG = UNSIGNED___INT64
DWORDLONG = ULONGLONG
PDWORDLONG = ULONGLONG
ERROR_STATUS_T = UNSIGNED_LONG
FLOAT = FLOAT
UCHAR = UNSIGNED_CHAR
PUCHAR = UNSIGNED_CHAR
SHORT = SHORT
HANDLE = VOID
HCALL = DWORD
INT = INT
LPINT = INT
INT8 = SIGNED_CHAR
INT16 = SIGNED_SHORT
INT32 = SIGNED_INT
INT64 = SIGNED___INT64
LDAP_UDP_HANDLE = VOID
LMCSTR = CONST_WCHAR_T
LMSTR = WCHAR
LONG = LONG
PLONG = LONG
LPLONG = LONG
LONGLONG = SIGNED___INT64
HRESULT = LONG
LONG_PTR = __INT3264
ULONG_PTR = UNSIGNED___INT3264
LONG32 = SIGNED_INT
LONG64 = SIGNED___INT64
PLONG64 = SIGNED___INT64
LPCSTR = CONST_CHAR
LPCVOID = CONST_VOID
LPCWSTR = CONST_WCHAR_T
PSTR = CHAR
LPSTR = CHAR
LPWSTR = WCHAR_T
PWSTR = WCHAR_T
NET_API_STATUS = DWORD
NTSTATUS = LONG
PCONTEXT_HANDLE = VOID
PPCONTEXT_HANDLE = PCONTEXT_HANDLE
QWORD = UNSIGNED___INT64
RPC_BINDING_HANDLE = VOID
STRING = UCHAR
UINT = UNSIGNED_INT
UINT8 = UNSIGNED_CHAR
UINT16 = UNSIGNED_SHORT
UINT32 = UNSIGNED_INT
UINT64 = UNSIGNED___INT64
ULONG = UNSIGNED_LONG
PULONG = UNSIGNED_LONG
DWORD_PTR = ULONG_PTR
SIZE_T = ULONG_PTR
ULONG32 = UNSIGNED_INT
ULONG64 = UNSIGNED___INT64
UNICODE = WCHAR_T
USHORT = UNSIGNED_SHORT
VOID = VOID
PVOID = VOID
LPVOID = VOID
WORD = UNSIGNED_SHORT
PWORD = UNSIGNED_SHORT
LPWORD = UNSIGNED_SHORT

class FILETIME(NDRSTRUCT):
    structure = (
        ('dwLowDateTime', DWORD),('dwHighDateTime', DWORD),
    )
class PFILETIME(NDRPOINTER):
    referent = (
        ('Data', FILETIME),
    )    
class LPFILETIME(NDRPOINTER):
    referent = (
        ('Data', FILETIME),
    )    


class GUID(NDRSTRUCT):
    structure = (
        ('Data1', UNSIGNED_LONG),('Data2', UNSIGNED_SHORT),('Data3', UNSIGNED_SHORT),('Data4', BYTE),
    )
UUID = GUID
class PGUID(NDRPOINTER):
    referent = (
        ('Data', GUID),
    )    


class LARGE_INTEGER(NDRSTRUCT):
    structure = (
        ('QuadPart', SIGNED___INT64),
    )
class PLARGE_INTEGER(NDRPOINTER):
    referent = (
        ('Data', LARGE_INTEGER),
    )    


class EVENT_DESCRIPTOR(NDRSTRUCT):
    structure = (
        ('Id', USHORT),('Version', UCHAR),('Channel', UCHAR),('Level', UCHAR),('Opcode', UCHAR),('Task', USHORT),('Keyword', ULONGLONG),
    )
class PEVENT_DESCRIPTOR(NDRPOINTER):
    referent = (
        ('Data', EVENT_DESCRIPTOR),
    )    
class PCEVENT_DESCRIPTOR(NDRPOINTER):
    referent = (
        ('Data', EVENT_DESCRIPTOR),
    )    


class S0(NDRSTRUCT):
    structure = (
        ('KernelTime', ULONG),('UserTime', ULONG),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),2: ('ProcessorTime',ULONG64),
    }
        

class EVENT_HEADER(NDRSTRUCT):
    structure = (
        ('Size', USHORT),('HeaderType', USHORT),('Flags', USHORT),('EventProperty', USHORT),('ThreadId', ULONG),('ProcessId', ULONG),('TimeStamp', LARGE_INTEGER),('ProviderId', GUID),('EventDescriptor', EVENT_DESCRIPTOR),('u0', U0),('ActivityId', GUID),
    )
class PEVENT_HEADER(NDRPOINTER):
    referent = (
        ('Data', EVENT_HEADER),
    )    

LCID = DWORD

class LUID(NDRSTRUCT):
    structure = (
        ('LowPart', DWORD),('HighPart', LONG),
    )
class PLUID(NDRPOINTER):
    referent = (
        ('Data', LUID),
    )    


class MULTI_SZ(NDRSTRUCT):
    structure = (
        ('Value', WCHAR_T),('nChar', DWORD),
    )


class DATA_RPC_UNICODE_STRING(NDRUniConformantArray):
    item = WCHAR

class PTR_RPC_UNICODE_STRING(NDRPOINTER):
    referent = (
        ('Data', DATA_RPC_UNICODE_STRING),
    )

class RPC_UNICODE_STRING(NDRSTRUCT):
    structure = (
	('Length', UNSIGNED_SHORT),	('MaximumLength', UNSIGNED_SHORT),	('Buffer', PTR_RPC_UNICODE_STRING),

    )
        

class SERVER_INFO_100(NDRSTRUCT):
    structure = (
        ('sv100_platform_id', DWORD),('sv100_name', WCHAR_T),
    )
class PSERVER_INFO_100(NDRPOINTER):
    referent = (
        ('Data', SERVER_INFO_100),
    )    
class LPSERVER_INFO_100(NDRPOINTER):
    referent = (
        ('Data', SERVER_INFO_100),
    )    


class SERVER_INFO_101(NDRSTRUCT):
    structure = (
        ('sv101_platform_id', DWORD),('sv101_name', WCHAR_T),('sv101_version_major', DWORD),('sv101_version_minor', DWORD),('sv101_version_type', DWORD),('sv101_comment', WCHAR_T),
    )
class PSERVER_INFO_101(NDRPOINTER):
    referent = (
        ('Data', SERVER_INFO_101),
    )    
class LPSERVER_INFO_101(NDRPOINTER):
    referent = (
        ('Data', SERVER_INFO_101),
    )    


class SYSTEMTIME(NDRSTRUCT):
    structure = (
        ('wYear', WORD),('wMonth', WORD),('wDayOfWeek', WORD),('wDay', WORD),('wHour', WORD),('wMinute', WORD),('wSecond', WORD),('wMilliseconds', WORD),
    )
class PSYSTEMTIME(NDRPOINTER):
    referent = (
        ('Data', SYSTEMTIME),
    )    


class UINT128(NDRSTRUCT):
    structure = (
        ('lower', UINT64),('upper', UINT64),
    )
class PUINT128(NDRPOINTER):
    referent = (
        ('Data', UINT128),
    )    


class ULARGE_INTEGER(NDRSTRUCT):
    structure = (
        ('QuadPart', UNSIGNED___INT64),
    )
class PULARGE_INTEGER(NDRPOINTER):
    referent = (
        ('Data', ULARGE_INTEGER),
    )    


class RPC_SID_IDENTIFIER_AUTHORITY(NDRSTRUCT):
    structure = (
        ('Value', BYTE),
    )

ACCESS_MASK = DWORD
PACCESS_MASK = ACCESS_MASK

class OBJECT_TYPE_LIST(NDRSTRUCT):
    structure = (
        ('Level', WORD),('Remaining', ACCESS_MASK),('ObjectType', GUID),
    )
class POBJECT_TYPE_LIST(NDRPOINTER):
    referent = (
        ('Data', OBJECT_TYPE_LIST),
    )    


class ACE_HEADER(NDRSTRUCT):
    structure = (
        ('AceType', UCHAR),('AceFlags', UCHAR),('AceSize', USHORT),
    )
class PACE_HEADER(NDRPOINTER):
    referent = (
        ('Data', ACE_HEADER),
    )    


class SYSTEM_MANDATORY_LABEL_ACE(NDRSTRUCT):
    structure = (
        ('Header', ACE_HEADER),('Mask', ACCESS_MASK),('SidStart', DWORD),
    )
class PSYSTEM_MANDATORY_LABEL_ACE(NDRPOINTER):
    referent = (
        ('Data', SYSTEM_MANDATORY_LABEL_ACE),
    )    


class TOKEN_MANDATORY_POLICY(NDRSTRUCT):
    structure = (
        ('Policy', DWORD),
    )
class PTOKEN_MANDATORY_POLICY(NDRPOINTER):
    referent = (
        ('Data', TOKEN_MANDATORY_POLICY),
    )    


class MANDATORY_INFORMATION(NDRSTRUCT):
    structure = (
        ('AllowedAccess', ACCESS_MASK),('WriteAllowed', BOOLEAN),('ReadAllowed', BOOLEAN),('ExecuteAllowed', BOOLEAN),('MandatoryPolicy', TOKEN_MANDATORY_POLICY),
    )
class PMANDATORY_INFORMATION(NDRPOINTER):
    referent = (
        ('Data', MANDATORY_INFORMATION),
    )    


class CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE(NDRSTRUCT):
    structure = (
        ('Length', DWORD),('OctetString', BYTE),
    )
class PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE(NDRPOINTER):
    referent = (
        ('Data', CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE),
    )    


class VALUES(NDRUNION):
    union = {
        1: ('pInt64',PLONG64),2: ('pUint64',PDWORD64),3: ('ppString',PWSTR),4: ('pOctetString',PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE),
    }
        

class CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1(NDRSTRUCT):
    structure = (
        ('Name', DWORD),('ValueType', WORD),('Reserved', WORD),('Flags', DWORD),('ValueCount', DWORD),('Values', VALUES),
    )
class PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1(NDRPOINTER):
    referent = (
        ('Data', CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1),
    )    

SECURITY_INFORMATION = DWORD
PSECURITY_INFORMATION = DWORD

class RPC_SID(NDRSTRUCT):
    structure = (
        ('Revision', UNSIGNED_CHAR),('SubAuthorityCount', UNSIGNED_CHAR),('IdentifierAuthority', RPC_SID_IDENTIFIER_AUTHORITY),('SubAuthority', UNSIGNED_LONG),
    )
class PRPC_SID(NDRPOINTER):
    referent = (
        ('Data', RPC_SID),
    )    
class PSID(NDRPOINTER):
    referent = (
        ('Data', RPC_SID),
    )    


class ACL(NDRSTRUCT):
    structure = (
        ('AclRevision', UNSIGNED_CHAR),('Sbz1', UNSIGNED_CHAR),('AclSize', UNSIGNED_SHORT),('AceCount', UNSIGNED_SHORT),('Sbz2', UNSIGNED_SHORT),
    )
class PACL(NDRPOINTER):
    referent = (
        ('Data', ACL),
    )    


class SECURITY_DESCRIPTOR(NDRSTRUCT):
    structure = (
        ('Revision', UCHAR),('Sbz1', UCHAR),('Control', USHORT),('Owner', PSID),('Group', PSID),('Sacl', PACL),('Dacl', PACL),
    )
class PSECURITY_DESCRIPTOR(NDRPOINTER):
    referent = (
        ('Data', SECURITY_DESCRIPTOR),
    )    

#################################################################################

#TYPEDEFS

#################################################################################


FW_STORE_TYPE_INVALID = ,
FW_STORE_TYPE_GP_RSOP = ,
FW_STORE_TYPE_LOCAL = ,
FW_STORE_TYPE_NOT_USED_VALUE_3 = ,
FW_STORE_TYPE_NOT_USED_VALUE_4 = ,
FW_STORE_TYPE_DYNAMIC = ,
FW_STORE_TYPE_GPO = ,
FW_STORE_TYPE_DEFAULTS = ,
FW_STORE_TYPE_NOT_USED_VALUE_8 = ,
FW_STORE_TYPE_NOT_USED_VALUE_9 = ,
FW_STORE_TYPE_NOT_USED_VALUE_10 = ,
FW_STORE_TYPE_NOT_USED_VALUE_11 = ,
FW_STORE_TYPE_MAX = 
        

FW_TRANSACTIONAL_STATE_NONE = 0,
FW_TRANSACTIONAL_STATE_NO_FLUSH = 0
        

FW_PROFILE_TYPE_INVALID = 0,
FW_PROFILE_TYPE_DOMAIN = 1,
FW_PROFILE_TYPE_STANDARD = 2,
FW_PROFILE_TYPE_PRIVATE = FW_PROFILE_TYPE_STANDARD,
FW_PROFILE_TYPE_PUBLIC = 4,
FW_PROFILE_TYPE_ALL = 2147483647,
FW_PROFILE_TYPE_CURRENT = 2147483648,
FW_PROFILE_TYPE_NONE = 1
        

FW_POLICY_ACCESS_RIGHT_INVALID = ,
FW_POLICY_ACCESS_RIGHT_READ = ,
FW_POLICY_ACCESS_RIGHT_READ_WRITE = 
        

FW_POLICY_STORE_FLAGS_NONE = 0,
FW_POLICY_STORE_FLAGS_DELETE_DYNAMIC_RULES_AFTER_CLOSE = 1,
FW_POLICY_STORE_FLAGS_OPEN_GP_CACHE = 2,
FW_POLICY_STORE_FLAGS_USE_GP_CACHE = 4,
FW_POLICY_STORE_FLAGS_SAVE_GP_CACHE = 8,
FW_POLICY_STORE_FLAGS_NOT_USED_VALUE_16 = 16,
FW_POLICY_STORE_FLAGS_MAX = 32
        

class FW_IPV4_SUBNET(NDRSTRUCT):
    structure = (
        ('dwAddress', DWORD),('dwSubNetMask', DWORD),
    )
class PFW_IPV4_SUBNET(NDRPOINTER):
    referent = (
        ('Data', FW_IPV4_SUBNET),
    )    


class FW_IPV4_SUBNET_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pSubNets', PFW_IPV4_SUBNET),
    )
class PFW_IPV4_SUBNET_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_IPV4_SUBNET_LIST),
    )    


class FW_IPV6_SUBNET(NDRSTRUCT):
    structure = (
        ('Address', BYTE),('dwNumPrefixBits', DWORD),
    )
class PFW_IPV6_SUBNET(NDRPOINTER):
    referent = (
        ('Data', FW_IPV6_SUBNET),
    )    


class FW_IPV6_SUBNET_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pSubNets', PFW_IPV6_SUBNET),
    )
class PFW_IPV6_SUBNET_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_IPV6_SUBNET_LIST),
    )    


class FW_IPV4_ADDRESS_RANGE(NDRSTRUCT):
    structure = (
        ('dwBegin', DWORD),('dwEnd', DWORD),
    )
class PFW_IPV4_ADDRESS_RANGE(NDRPOINTER):
    referent = (
        ('Data', FW_IPV4_ADDRESS_RANGE),
    )    


class FW_IPV6_ADDRESS_RANGE(NDRSTRUCT):
    structure = (
        ('Begin', BYTE),('End', BYTE),
    )
class PFW_IPV6_ADDRESS_RANGE(NDRPOINTER):
    referent = (
        ('Data', FW_IPV6_ADDRESS_RANGE),
    )    


class FW_IPV4_RANGE_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pRanges', PFW_IPV4_ADDRESS_RANGE),
    )
class PFW_IPV4_RANGE_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_IPV4_RANGE_LIST),
    )    


class FW_IPV6_RANGE_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pRanges', PFW_IPV6_ADDRESS_RANGE),
    )
class PFW_IPV6_RANGE_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_IPV6_RANGE_LIST),
    )    


class FW_PORT_RANGE(NDRSTRUCT):
    structure = (
        ('wBegin', WORD),('wEnd', WORD),
    )
class PFW_PORT_RANGE(NDRPOINTER):
    referent = (
        ('Data', FW_PORT_RANGE),
    )    


class FW_PORT_RANGE_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pPorts', PFW_PORT_RANGE),
    )
class PFW_PORT_RANGE_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_PORT_RANGE_LIST),
    )    


FW_PORT_KEYWORD_NONE = 0,
FW_PORT_KEYWORD_DYNAMIC_RPC_PORTS = 1,
FW_PORT_KEYWORD_RPC_EP = 2,
FW_PORT_KEYWORD_TEREDO_PORT = 4,
FW_PORT_KEYWORD_IP_TLS_IN = 8,
FW_PORT_KEYWORD_IP_TLS_OUT = 16,
FW_PORT_KEYWORD_DHCP = 32,
FW_PORT_KEYWORD_PLAYTO_DISCOVERY = 64,
FW_PORT_KEYWORD_MDNS = 128,
FW_PORT_KEYWORD_CORTANA_OUT = 256,
FW_PORT_KEYWORD_PROXIMAL_TCP_CDP = 512,
FW_PORT_KEYWORD_MAX = 1024,
FW_PORT_KEYWORD_MAX_V2_1 = 8,
FW_PORT_KEYWORD_MAX_V2_10 = 32,
FW_PORT_KEYWORD_MAX_V2_20 = 128,
FW_PORT_KEYWORD_MAX_V2_24 = 256,
FW_PORT_KEYWORD_MAX_V2_25 = 512
        

class FW_PORTS(NDRSTRUCT):
    structure = (
        ('wPortKeywords', WORD),('Ports', FW_PORT_RANGE_LIST),
    )
class PFW_PORTS(NDRPOINTER):
    referent = (
        ('Data', FW_PORTS),
    )    


class FW_ICMP_TYPE_CODE(NDRSTRUCT):
    structure = (
        ('bType', BYTE),('wCode', WORD),
    )
class PFW_ICMP_TYPE_CODE(NDRPOINTER):
    referent = (
        ('Data', FW_ICMP_TYPE_CODE),
    )    


class FW_ICMP_TYPE_CODE_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pEntries', PFW_ICMP_TYPE_CODE),
    )
class PFW_ICMP_TYPE_CODE_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_ICMP_TYPE_CODE_LIST),
    )    


class DATA_FW_INTERFACE_LUIDS(NDRUniConformantArray):
    item = GUID

class PTR_FW_INTERFACE_LUIDS(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_INTERFACE_LUIDS),
    )

class FW_INTERFACE_LUIDS(NDRSTRUCT):
    structure = (
	('dwNumLUIDs', DWORD),	('pLUIDs', PTR_FW_INTERFACE_LUIDS),

    )
        

FW_DIR_INVALID = 0,
FW_DIR_IN = 0,
FW_DIR_OUT = 0
        

FW_INTERFACE_TYPE_ALL = 0,
FW_INTERFACE_TYPE_LAN = 1,
FW_INTERFACE_TYPE_WIRELESS = 2,
FW_INTERFACE_TYPE_REMOTE_ACCESS = 4,
FW_INTERFACE_TYPE_MOBILE_BBAND = 8,
FW_INTERFACE_TYPE_MAX = 16,
FW_INTERFACE_TYPE_MAX_V2_23 = 8
        

FW_ADDRESS_KEYWORD_NONE = 0,
FW_ADDRESS_KEYWORD_LOCAL_SUBNET = 1,
FW_ADDRESS_KEYWORD_DNS = 2,
FW_ADDRESS_KEYWORD_DHCP = 4,
FW_ADDRESS_KEYWORD_WINS = 8,
FW_ADDRESS_KEYWORD_DEFAULT_GATEWAY = 16,
FW_ADDRESS_KEYWORD_INTRANET = 32,
FW_ADDRESS_KEYWORD_INTERNET = 64,
FW_ADDRESS_KEYWORD_PLAYTO_RENDERERS = 128,
FW_ADDRESS_KEYWORD_REMOTE_INTRANET = 256,
FW_ADDRESS_KEYWORD_CAPTIVE_PORTAL = 512,
FW_ADDRESS_KEYWORD_MAX = 1024,
FW_ADDRESS_KEYWORD_MAX_V2_10 = 32,
FW_ADDRESS_KEYWORD_MAX_V2_29 = 512
        

class FW_ADDRESSES(NDRSTRUCT):
    structure = (
        ('dwV4AddressKeywords', DWORD),('dwV6AddressKeywords', DWORD),('V4SubNets', FW_IPV4_SUBNET_LIST),('V4Ranges', FW_IPV4_RANGE_LIST),('V6SubNets', FW_IPV6_SUBNET_LIST),('V6Ranges', FW_IPV6_RANGE_LIST),
    )
class PFW_ADDRESSES(NDRPOINTER):
    referent = (
        ('Data', FW_ADDRESSES),
    )    


FW_TRUST_TUPLE_KEYWORD_NONE = 0,
FW_TRUST_TUPLE_KEYWORD_PROXIMITY = 1,
FW_TRUST_TUPLE_KEYWORD_PROXIMITY_SHARING = 2,
FW_TRUST_TUPLE_KEYWORD_WFD_PRINT = 4,
FW_TRUST_TUPLE_KEYWORD_WFD_DISPLAY = 8,
FW_TRUST_TUPLE_KEYWORD_WFD_DEVICES = 16,
FW_TRUST_TUPLE_KEYWORD_WFD_KM_DRIVER = 32,
FW_TRUST_TUPLE_KEYWORD_UPNP = 64,
FW_TRUST_TUPLE_KEYWORD_WFD_CDP = 128,
FW_TRUST_TUPLE_KEYWORD_MAX = 256,
FW_TRUST_TUPLE_KEYWORD_MAX_V2_20 = 4,
FW_TRUST_TUPLE_KEYWORD_MAX_V2_26 = 32,
FW_TRUST_TUPLE_KEYWORD_MAX_V2_27 = 128
        

FW_RULE_STATUS_OK = 65536,
FW_RULE_STATUS_PARTIALLY_IGNORED = 131072,
FW_RULE_STATUS_IGNORED = 262144,
FW_RULE_STATUS_PARSING_ERROR = 524288,
FW_RULE_STATUS_PARSING_ERROR_NAME = 524289,
FW_RULE_STATUS_PARSING_ERROR_DESC = 524290,
FW_RULE_STATUS_PARSING_ERROR_APP = 524291,
FW_RULE_STATUS_PARSING_ERROR_SVC = 524292,
FW_RULE_STATUS_PARSING_ERROR_RMA = 524293,
FW_RULE_STATUS_PARSING_ERROR_RUA = 524294,
FW_RULE_STATUS_PARSING_ERROR_EMBD = 524295,
FW_RULE_STATUS_PARSING_ERROR_RULE_ID = 524296,
FW_RULE_STATUS_PARSING_ERROR_PHASE1_AUTH = 524297,
FW_RULE_STATUS_PARSING_ERROR_PHASE2_CRYPTO = 524298,
FW_RULE_STATUS_PARSING_ERROR_PHASE2_AUTH = 524299,
FW_RULE_STATUS_PARSING_ERROR_RESOLVE_APP = 524300,
FW_RULE_STATUS_PARSING_ERROR_MAINMODE_ID = 524301,
FW_RULE_STATUS_PARSING_ERROR_PHASE1_CRYPTO = 524302,
FW_RULE_STATUS_PARSING_ERROR_REMOTE_ENDPOINTS = 524303,
FW_RULE_STATUS_PARSING_ERROR_REMOTE_ENDPOINT_FQDN = 524304,
FW_RULE_STATUS_PARSING_ERROR_KEY_MODULE = 524305,
FW_RULE_STATUS_PARSING_ERROR_LUA = 524306,
FW_RULE_STATUS_PARSING_ERROR_FWD_LIFETIME = 524307,
FW_RULE_STATUS_PARSING_ERROR_TRANSPORT_MACHINE_AUTHZ_SDDL = 524308,
FW_RULE_STATUS_PARSING_ERROR_TRANSPORT_USER_AUTHZ_SDDL = 524309,
FW_RULE_STATUS_PARSING_ERROR_NETNAMES_STRING = 524310,
FW_RULE_STATUS_PARSING_ERROR_SECURITY_REALM_ID_STRING = 524311,
FW_RULE_STATUS_PARSING_ERROR_FQBN_STRING = 524312,
FW_RULE_STATUS_SEMANTIC_ERROR = 1048576,
FW_RULE_STATUS_SEMANTIC_ERROR_RULE_ID = 1048592,
FW_RULE_STATUS_SEMANTIC_ERROR_PORTS = 1048608,
FW_RULE_STATUS_SEMANTIC_ERROR_PORT_KEYW = 1048609,
FW_RULE_STATUS_SEMANTIC_ERROR_PORT_RANGE = 1048610,
FW_RULE_STATUS_SEMANTIC_ERROR_PORTRANGE_RESTRICTION = 1048611,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V4_SUBNETS = 1048640,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V6_SUBNETS = 1048641,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V4_RANGES = 1048642,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V6_RANGES = 1048643,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_RANGE = 1048644,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_MASK = 1048645,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_PREFIX = 1048646,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_KEYW = 1048647,
FW_RULE_STATUS_SEMANTIC_ERROR_LADDR_PROP = 1048648,
FW_RULE_STATUS_SEMANTIC_ERROR_RADDR_PROP = 1048649,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V6 = 1048650,
FW_RULE_STATUS_SEMANTIC_ERROR_LADDR_INTF = 1048651,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V4 = 1048652,
FW_RULE_STATUS_SEMANTIC_ERROR_TUNNEL_ENDPOINT_ADDR = 1048653,
FW_RULE_STATUS_SEMANTIC_ERROR_DTE_VER = 1048654,
FW_RULE_STATUS_SEMANTIC_ERROR_DTE_MISMATCH_ADDR = 1048655,
FW_RULE_STATUS_SEMANTIC_ERROR_PROFILE = 1048656,
FW_RULE_STATUS_SEMANTIC_ERROR_ICMP = 1048672,
FW_RULE_STATUS_SEMANTIC_ERROR_ICMP_CODE = 1048673,
FW_RULE_STATUS_SEMANTIC_ERROR_IF_ID = 1048688,
FW_RULE_STATUS_SEMANTIC_ERROR_IF_TYPE = 1048689,
FW_RULE_STATUS_SEMANTIC_ERROR_ACTION = 1048704,
FW_RULE_STATUS_SEMANTIC_ERROR_ALLOW_BYPASS = 1048705,
FW_RULE_STATUS_SEMANTIC_ERROR_DO_NOT_SECURE = 1048706,
FW_RULE_STATUS_SEMANTIC_ERROR_ACTION_BLOCK_IS_ENCRYPTED_SECURE = 1048707,
FW_RULE_STATUS_SEMANTIC_ERROR_INCOMPATIBLE_FLAG_OR_ACTION_WITH_SECURITY_REALM = 1048708,
FW_RULE_STATUS_SEMANTIC_ERROR_DIR = 1048720,
FW_RULE_STATUS_SEMANTIC_ERROR_PROT = 1048736,
FW_RULE_STATUS_SEMANTIC_ERROR_PROT_PROP = 1048737,
FW_RULE_STATUS_SEMANTIC_ERROR_DEFER_EDGE_PROP = 1048738,
FW_RULE_STATUS_SEMANTIC_ERROR_ALLOW_BYPASS_OUTBOUND = 1048739,
FW_RULE_STATUS_SEMANTIC_ERROR_DEFER_USER_INVALID_RULE = 1048740,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS = 1048752,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTO_AUTH = 1048753,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTO_BLOCK = 1048754,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTO_DYN_RPC = 1048755,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTHENTICATE_ENCRYPT = 1048756,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTH_WITH_ENC_NEGOTIATE_VER = 1048757,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTH_WITH_ENC_NEGOTIATE = 1048758,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ESP_NO_ENCAP_VER = 1048759,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ESP_NO_ENCAP = 1048760,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_TUNNEL_AUTH_MODES_VER = 1048761,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_TUNNEL_AUTH_MODES = 1048762,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_IP_HTTPS_VER = 1048763,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_IP_TLS_VER = 1048763,
FW_RULE_STATUS_SEMANTIC_ERROR_PORTRANGE_VER = 1048764,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ADDRS_TRAVERSE_DEFER_VER = 1048765,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTH_WITH_ENC_NEGOTIATE_OUTBOUND = 1048766,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTHENTICATE_WITH_OUTBOUND_BYPASS_VER = 1048767,
FW_RULE_STATUS_SEMANTIC_ERROR_REMOTE_AUTH_LIST = 1048768,
FW_RULE_STATUS_SEMANTIC_ERROR_REMOTE_USER_LIST = 1048769,
FW_RULE_STATUS_SEMANTIC_ERROR_LOCAL_USER_LIST = 1048770,
FW_RULE_STATUS_SEMANTIC_ERROR_LUA_VER = 1048771,
FW_RULE_STATUS_SEMANTIC_ERROR_LOCAL_USER_OWNER = 1048772,
FW_RULE_STATUS_SEMANTIC_ERROR_LOCAL_USER_OWNER_VER = 1048773,
FW_RULE_STATUS_SEMANTIC_ERROR_LUA_CONDITIONAL_VER = 1048774,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_SYSTEMOS_GAMEOS = 1048775,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_CORTANA_VER = 1048776,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_REMOTENAME = 1048777,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ALLOW_PROFILE_CROSSING_VER = 1048784,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_LOCAL_ONLY_MAPPED_VER = 1048785,
FW_RULE_STATUS_SEMANTIC_ERROR_PLATFORM = 1048800,
FW_RULE_STATUS_SEMANTIC_ERROR_PLATFORM_OP_VER = 1048801,
FW_RULE_STATUS_SEMANTIC_ERROR_PLATFORM_OP = 1048802,
FW_RULE_STATUS_SEMANTIC_ERROR_DTE_NOANY_ADDR = 1048816,
FW_RULE_STATUS_SEMANTIC_ERROR_TUNNEL_EXEMPT_WITH_GATEWAY = 1048817,
FW_RULE_STATUS_SEMANTIC_ERROR_TUNNEL_EXEMPT_VER = 1048818,
FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_KEYWORD_VER = 1048819,
FW_RULE_STATUS_SEMANTIC_ERROR_KEY_MODULE_VER = 1048820,
FW_RULE_STATUS_SEMANTIC_ERROR_APP_CONTAINER_PACKAGE_ID = 1048832,
FW_RULE_STATUS_SEMANTIC_ERROR_APP_CONTAINER_PACKAGE_ID_VER = 1048833,
FW_RULE_STATUS_SEMANTIC_ERROR_TRUST_TUPLE_KEYWORD_INCOMPATIBLE = 1049088,
FW_RULE_STATUS_SEMANTIC_ERROR_TRUST_TUPLE_KEYWORD_INVALID = 1049089,
FW_RULE_STATUS_SEMANTIC_ERROR_TRUST_TUPLE_KEYWORD_VER = 1049090,
FW_RULE_STATUS_SEMANTIC_ERROR_INTERFACE_TYPES_VER = 1049345,
FW_RULE_STATUS_SEMANTIC_ERROR_NETNAMES_VER = 1049601,
FW_RULE_STATUS_SEMANTIC_ERROR_SECURITY_REALM_ID_VER = 1049602,
FW_RULE_STATUS_SEMANTIC_ERROR_SYSTEMOS_GAMEOS_VER = 1049603,
FW_RULE_STATUS_SEMANTIC_ERROR_DEVMODE_VER = 1049604,
FW_RULE_STATUS_SEMANTIC_ERROR_REMOTE_SERVERNAME_VER = 1049605,
FW_RULE_STATUS_SEMANTIC_ERROR_FQBN_VER = 1049606,
FW_RULE_STATUS_SEMANTIC_ERROR_COMPARTMENT_ID_VER = 1049607,
FW_RULE_STATUS_SEMANTIC_ERROR_CALLOUT_AND_AUDIT_VER = 1049608,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_AUTH_SET_ID = 1049856,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_SET_ID = 1049872,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_SET_ID = 1049873,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_KEY_MANAGER_DICTATE_VER = 1049874,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_KEY_MANAGER_NOTIFY_VER = 1049875,
FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_MACHINE_AUTHZ_VER = 1049876,
FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_USER_AUTHZ_VER = 1049877,
FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_MACHINE_AUTHZ_ON_TUNNEL = 1049878,
FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_USER_AUTHZ_ON_TUNNEL = 1049879,
FW_RULE_STATUS_SEMANTIC_ERROR_PER_RULE_AND_GLOBAL_AUTHZ = 1049880,
FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_SECURITY_REALM = 1049881,
FW_RULE_STATUS_SEMANTIC_ERROR_SET_ID = 1052672,
FW_RULE_STATUS_SEMANTIC_ERROR_IPSEC_PHASE = 1052688,
FW_RULE_STATUS_SEMANTIC_ERROR_EMPTY_SUITES = 1052704,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_AUTH_METHOD = 1052720,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_AUTH_METHOD = 1052721,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_METHOD_ANONYMOUS = 1052722,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_METHOD_DUPLICATE = 1052723,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_METHOD_VER = 1052724,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_SUITE_FLAGS = 1052736,
FW_RULE_STATUS_SEMANTIC_ERROR_HEALTH_CERT = 1052737,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_SIGNCERT_VER = 1052738,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_INTERMEDIATE_CA_VER = 1052739,
FW_RULE_STATUS_SEMANTIC_ERROR_MACHINE_SHKEY = 1052752,
FW_RULE_STATUS_SEMANTIC_ERROR_CA_NAME = 1052768,
FW_RULE_STATUS_SEMANTIC_ERROR_MIXED_CERTS = 1052769,
FW_RULE_STATUS_SEMANTIC_ERROR_NON_CONTIGUOUS_CERTS = 1052770,
FW_RULE_STATUS_SEMANTIC_ERROR_MIXED_CA_TYPE_IN_BLOCK = 1052771,
FW_RULE_STATUS_SEMANTIC_ERROR_MACHINE_USER_AUTH = 1052784,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_VER = 1052785,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_VER_MISMATCH = 1052786,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_RENEWAL_HASH = 1052787,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_HASH = 1052788,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_EKU = 1052789,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_NAME_TYPE = 1052790,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_NAME = 1052791,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_CRITERIA_TYPE = 1052792,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_MISSING_CRITERIA = 1052793,
FW_RULE_STATUS_SEMANTIC_ERROR_PROXY_SERVER = 1052800,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_PROXY_SERVER_VER = 1052801,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_NON_DEFAULT_ID = 1069056,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_FLAGS = 1069057,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_TIMEOUT_MINUTES = 1069058,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_TIMEOUT_SESSIONS = 1069059,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_KEY_EXCHANGE = 1069060,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_ENCRYPTION = 1069061,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_HASH = 1069062,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_ENCRYPTION_VER = 1069063,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_HASH_VER = 1069064,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_KEY_EXCH_VER = 1069065,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_PFS = 1069088,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_PROTOCOL = 1069089,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_ENCRYPTION = 1069090,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_HASH = 1069091,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_TIMEOUT_MINUTES = 1069092,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_TIMEOUT_KBYTES = 1069093,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_ENCRYPTION_VER = 1069094,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_HASH_VER = 1069095,
FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_PFS_VER = 1069096,
FW_RULE_STATUS_SEMANTIC_ERROR_CRYPTO_ENCR_HASH = 1069120,
FW_RULE_STATUS_SEMANTIC_ERROR_CRYPTO_ENCR_HASH_COMPAT = 1069121,
FW_RULE_STATUS_SEMANTIC_ERROR_SCHEMA_VERSION = 1069136,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_OR_AND_CONDITIONS = 1073152,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_AND_CONDITIONS = 1073153,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_KEY = 1073154,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_MATCH_TYPE = 1073155,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_DATA_TYPE = 1073156,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_KEY_AND_DATA_TYPE = 1073157,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEYS_PROTOCOL_PORT = 1073158,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_PROFILE = 1073159,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_STATUS = 1073160,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_FILTERID = 1073161,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_APP_PATH = 1073168,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_PROTOCOL = 1073169,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_LOCAL_PORT = 1073170,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_REMOTE_PORT = 1073171,
FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_SVC_NAME = 1073173,
FW_RULE_STATUS_SEMANTIC_ERROR_REQUIRE_IN_CLEAR_OUT_ON_TRANSPORT = 1077248,
FW_RULE_STATUS_SEMANTIC_ERROR_BYPASS_TUNNEL_IF_SECURE_ON_TRANSPORT = 1077249,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_NOENCAP_ON_TUNNEL = 1077250,
FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_NOENCAP_ON_PSK = 1077251,
FW_RULE_STATUS_RUNTIME_ERROR = 2097152,
FW_RULE_STATUS_RUNTIME_ERROR_PHASE1_AUTH_NOT_FOUND = 2097153,
FW_RULE_STATUS_RUNTIME_ERROR_PHASE2_AUTH_NOT_FOUND = 2097154,
FW_RULE_STATUS_RUNTIME_ERROR_PHASE2_CRYPTO_NOT_FOUND = 2097155,
FW_RULE_STATUS_RUNTIME_ERROR_AUTH_MCHN_SHKEY_MISMATCH = 2097156,
FW_RULE_STATUS_RUNTIME_ERROR_PHASE1_CRYPTO_NOT_FOUND = 2097157,
FW_RULE_STATUS_RUNTIME_ERROR_AUTH_NOENCAP_ON_TUNNEL = 2097158,
FW_RULE_STATUS_RUNTIME_ERROR_AUTH_NOENCAP_ON_PSK = 2097159,
FW_RULE_STATUS_RUNTIME_ERROR_KEY_MODULE_AUTH_MISMATCH = 2097160,
FW_RULE_STATUS_ERROR = FW_RULE_STATUS_RUNTIME_ERROR,
FW_RULE_STATUS_ALL = 4294901760
        

FW_RULE_STATUS_CLASS_OK = FW_RULE_STATUS_OK,
FW_RULE_STATUS_CLASS_PARTIALLY_IGNORED = FW_RULE_STATUS_PARTIALLY_IGNORED,
FW_RULE_STATUS_CLASS_IGNORED = FW_RULE_STATUS_IGNORED,
FW_RULE_STATUS_CLASS_PARSING_ERROR = FW_RULE_STATUS_PARSING_ERROR,
FW_RULE_STATUS_CLASS_SEMANTIC_ERROR = FW_RULE_STATUS_SEMANTIC_ERROR,
FW_RULE_STATUS_CLASS_RUNTIME_ERROR = FW_RULE_STATUS_RUNTIME_ERROR,
FW_RULE_STATUS_CLASS_ERROR = FW_RULE_STATUS_ERROR,
FW_RULE_STATUS_CLASS_ALL = FW_RULE_STATUS_ALL
        

FW_OBJECT_CTRL_FLAG_INCLUDE_METADATA = 1
        

FW_ENFORCEMENT_STATE_INVALID = ,
FW_ENFORCEMENT_STATE_FULL = ,
FW_ENFORCEMENT_STATE_WF_OFF_IN_PROFILE = ,
FW_ENFORCEMENT_STATE_CATEGORY_OFF = ,
FW_ENFORCEMENT_STATE_DISABLED_OBJECT = ,
FW_ENFORCEMENT_STATE_INACTIVE_PROFILE = ,
FW_ENFORCEMENT_STATE_LOCAL_ADDRESS_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_REMOTE_ADDRESS_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_LOCAL_PORT_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_REMOTE_PORT_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_INTERFACE_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_APPLICATION_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_REMOTE_MACHINE_EMPTY = ,
FW_ENFORCEMENT_STATE_REMOTE_USER_EMPTY = ,
FW_ENFORCEMENT_STATE_LOCAL_GLOBAL_OPEN_PORTS_DISALLOWED = ,
FW_ENFORCEMENT_STATE_LOCAL_AUTHORIZED_APPLICATIONS_DISALLOWED = ,
FW_ENFORCEMENT_STATE_LOCAL_FIREWALL_RULES_DISALLOWED = ,
FW_ENFORCEMENT_STATE_LOCAL_CONSEC_RULES_DISALLOWED = ,
FW_ENFORCEMENT_STATE_MISMATCHED_PLATFORM = ,
FW_ENFORCEMENT_STATE_OPTIMIZED_OUT = ,
FW_ENFORCEMENT_STATE_LOCAL_USER_EMPTY = ,
FW_ENFORCEMENT_STATE_TRANSPORT_MACHINE_SD_EMPTY = ,
FW_ENFORCEMENT_STATE_TRANSPORT_USER_SD_EMPTY = ,
FW_ENFORCEMENT_STATE_TUPLE_RESOLUTION_EMPTY = ,
FW_ENFORCEMENT_STATE_NETNAME_RESOLUTION_EMPTY = 
        

class DATA_FW_OBJECT_METADATA(NDRUniConformantArray):
    item = FW_ENFORCEMENT_STATE

class PTR_FW_OBJECT_METADATA(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_OBJECT_METADATA),
    )

class FW_OBJECT_METADATA(NDRSTRUCT):
    structure = (
	('qwFilterContextID', UINT64),	('dwNumEntries', DWORD),	('pEnforcementStates', PTR_FW_OBJECT_METADATA),

    )
        

FW_OS_PLATFORM_OP_EQ = ,
FW_OS_PLATFORM_OP_GTEQ = ,
FW_OS_PLATFORM_OP_MAX = ,
FW_OS_PLATFORM_OP_FIELD_SIZE = 5,
FW_OS_PLATFORM_OP_FIELD_MASK = 248
        

class FW_OS_PLATFORM(NDRSTRUCT):
    structure = (
        ('bPlatform', BYTE),('bMajorVersion', BYTE),('bMinorVersion', BYTE),('Reserved', BYTE),
    )
class PFW_OS_PLATFORM(NDRPOINTER):
    referent = (
        ('Data', FW_OS_PLATFORM),
    )    


class FW_OS_PLATFORM_LIST(NDRSTRUCT):
    structure = (
        ('dwNumEntries', DWORD),('pPlatforms', PFW_OS_PLATFORM),
    )
class PFW_OS_PLATFORM_LIST(NDRPOINTER):
    referent = (
        ('Data', FW_OS_PLATFORM_LIST),
    )    


class DATA_FW_NETWORK_NAMES(NDRUniConformantArray):
    item = LPWSTR

class PTR_FW_NETWORK_NAMES(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_NETWORK_NAMES),
    )

class FW_NETWORK_NAMES(NDRSTRUCT):
    structure = (
	('dwNumEntries', DWORD),	('wszNames', PTR_FW_NETWORK_NAMES),

    )
        

FW_RULE_ORIGIN_INVALID = ,
FW_RULE_ORIGIN_LOCAL = ,
FW_RULE_ORIGIN_GP = ,
FW_RULE_ORIGIN_DYNAMIC = ,
FW_RULE_ORIGIN_AUTOGEN = ,
FW_RULE_ORIGIN_HARDCODED = 
        

FW_ENUM_RULES_FLAG_NONE = 0,
FW_ENUM_RULES_FLAG_RESOLVE_NAME = 1,
FW_ENUM_RULES_FLAG_RESOLVE_DESCRIPTION = 2,
FW_ENUM_RULES_FLAG_RESOLVE_APPLICATION = 4,
FW_ENUM_RULES_FLAG_RESOLVE_KEYWORD = 8,
FW_ENUM_RULES_FLAG_RESOLVE_GPO_NAME = 16,
FW_ENUM_RULES_FLAG_EFFECTIVE = 32,
FW_ENUM_RULES_FLAG_INCLUDE_METADATA = 64,
FW_ENUM_RULES_FLAG_MAX = 128
        

FW_RULE_ACTION_INVALID = 0,
FW_RULE_ACTION_ALLOW_BYPASS = 0,
FW_RULE_ACTION_BLOCK = 0,
FW_RULE_ACTION_ALLOW = 0
        

FW_RULE_FLAGS_NONE = 0,
FW_RULE_FLAGS_ACTIVE = 1,
FW_RULE_FLAGS_AUTHENTICATE = 2,
FW_RULE_FLAGS_AUTHENTICATE_WITH_ENCRYPTION = 4,
FW_RULE_FLAGS_ROUTEABLE_ADDRS_TRAVERSE = 8,
FW_RULE_FLAGS_LOOSE_SOURCE_MAPPED = 16,
FW_RULE_FLAGS_MAX_V2_1 = 32,
FW_RULE_FLAGS_AUTH_WITH_NO_ENCAPSULATION = 32,
FW_RULE_FLAGS_MAX_V2_9 = 64,
FW_RULE_FLAGS_AUTH_WITH_ENC_NEGOTIATE = 64,
FW_RULE_FLAGS_ROUTEABLE_ADDRS_TRAVERSE_DEFER_APP = 128,
FW_RULE_FLAGS_ROUTEABLE_ADDRS_TRAVERSE_DEFER_USER = 256,
FW_RULE_FLAGS_AUTHENTICATE_BYPASS_OUTBOUND = 512,
FW_RULE_FLAGS_MAX_V2_10 = 1024,
FW_RULE_FLAGS_ALLOW_PROFILE_CROSSING = 1024,
FW_RULE_FLAGS_LOCAL_ONLY_MAPPED = 2048,
FW_RULE_FLAGS_MAX_V2_20 = 4096,
FW_RULE_FLAGS_LUA_CONDITIONAL_ACE = 4096,
FW_RULE_FLAGS_BIND_TO_INTERFACE = 8192,
FW_RULE_FLAGS_MAX = 16384
        

FW_RULE_FLAGS2_NONE = 0,
FW_RULE_FLAGS2_SYSTEMOS_ONLY = 1,
FW_RULE_FLAGS2_GAMEOS_ONLY = 2,
FW_RULE_FLAGS2_DEVMODE = 4,
FW_RULE_FLAGS_MAX_V2_26 = 8,
FW_RULE_FLAGS2_NOT_USED_VALUE_8 = 8,
FW_RULE_FLAGS2_NOT_USED_VALUE_16 = 16,
FW_RULE_FLAGS2_NOT_USED_VALUE_32 = 32,
FW_RULE_FLAGS2_NOT_USED_VALUE_64 = 64,
FW_RULE_FLAGS2_CALLOUT_AND_AUDIT = 128,
FW_RULE_FLAGS2_NOT_USED_VALUE_256 = 256,
FW_RULE_FLAGS2_NOT_USED_VALUE_512 = 512,
FW_RULE_FLAGS2_NOT_USED_VALUE_1024 = 1024,
FW_RULE_FLAGS2_MAX = 2048
        

class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_0(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', WCHAR),('wszLocalService', WCHAR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', WCHAR),('wszRemoteUserAuthorizationList', WCHAR),('wszEmbeddedContext', WCHAR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Reserved', DWORD),
    )
class PFW_RULE2_0(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_0),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_10(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', LPWSTR),('wszName', LPWSTR),('wszDescription', LPWSTR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', LPWSTR),('wszLocalService', LPWSTR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', LPWSTR),('wszRemoteUserAuthorizationList', LPWSTR),('wszEmbeddedContext', LPWSTR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', LPWSTR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),
    )
class PFW_RULE2_10(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_10),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_20(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', LPWSTR),('wszName', LPWSTR),('wszDescription', LPWSTR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', LPWSTR),('wszLocalService', LPWSTR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', LPWSTR),('wszRemoteUserAuthorizationList', LPWSTR),('wszEmbeddedContext', LPWSTR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', LPWSTR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),('wszLocalUserAuthorizationList', WCHAR),('wszPackageId', WCHAR),('wszLocalUserOwner', WCHAR),('dwTrustTupleKeywords', DWORD),
    )
class PFW_RULE2_20(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_20),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_24(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', LPWSTR),('wszName', LPWSTR),('wszDescription', LPWSTR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', LPWSTR),('wszLocalService', LPWSTR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', LPWSTR),('wszRemoteUserAuthorizationList', LPWSTR),('wszEmbeddedContext', LPWSTR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', LPWSTR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),('wszLocalUserAuthorizationList', WCHAR),('wszPackageId', WCHAR),('wszLocalUserOwner', WCHAR),('dwTrustTupleKeywords', DWORD),('OnNetworkNames', FW_NETWORK_NAMES),('wszSecurityRealmId', WCHAR),
    )
class PFW_RULE2_24(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_24),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_25(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', LPWSTR),('wszName', LPWSTR),('wszDescription', LPWSTR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', LPWSTR),('wszLocalService', LPWSTR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', LPWSTR),('wszRemoteUserAuthorizationList', LPWSTR),('wszEmbeddedContext', LPWSTR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', LPWSTR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),('wszLocalUserAuthorizationList', WCHAR),('wszPackageId', WCHAR),('wszLocalUserOwner', WCHAR),('dwTrustTupleKeywords', DWORD),('OnNetworkNames', FW_NETWORK_NAMES),('wszSecurityRealmId', WCHAR),('wFlags2', WORD),
    )
class PFW_RULE2_25(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_25),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_26(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', LPWSTR),('wszName', LPWSTR),('wszDescription', LPWSTR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', LPWSTR),('wszLocalService', LPWSTR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', LPWSTR),('wszRemoteUserAuthorizationList', LPWSTR),('wszEmbeddedContext', LPWSTR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', LPWSTR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),('wszLocalUserAuthorizationList', WCHAR),('wszPackageId', WCHAR),('wszLocalUserOwner', WCHAR),('dwTrustTupleKeywords', DWORD),('OnNetworkNames', FW_NETWORK_NAMES),('wszSecurityRealmId', WCHAR),('wFlags2', WORD),('RemoteOutServerNames', FW_NETWORK_NAMES),
    )
class PFW_RULE2_26(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_26),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE2_27(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', UNSIGNED_SHORT),('wszRuleId', WCHAR_T),('wszName', WCHAR_T),('wszDescription', WCHAR_T),('dwProfiles', UNSIGNED_LONG),('Direction', FW_DIRECTION),('wIpProtocol', UNSIGNED_SHORT),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', UNSIGNED_LONG),('wszLocalApplication', WCHAR_T),('wszLocalService', WCHAR_T),('Action', FW_RULE_ACTION),('wFlags', UNSIGNED_SHORT),('wszRemoteMachineAuthorizationList', WCHAR_T),('wszRemoteUserAuthorizationList', WCHAR_T),('wszEmbeddedContext', WCHAR_T),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR_T),('Reserved', UNSIGNED_LONG),('pMetaData', PFW_OBJECT_METADATA),('wszLocalUserAuthorizationList', WCHAR),('wszPackageId', WCHAR),('wszLocalUserOwner', WCHAR),('dwTrustTupleKeywords', UNSIGNED_LONG),('OnNetworkNames', FW_NETWORK_NAMES),('wszSecurityRealmId', WCHAR),('wFlags2', UNSIGNED_SHORT),('RemoteOutServerNames', FW_NETWORK_NAMES),('wszFqbn', WCHAR),('compartmentId', UNSIGNED_LONG),
    )
class PFW_RULE2_27(NDRPOINTER):
    referent = (
        ('Data', FW_RULE2_27),
    )    


class DATA_FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST(NDRUniConformantArray):
    item = UINT32

class PTR_FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST),
    )

class FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST(NDRSTRUCT):
    structure = (
	('dwNumIds', DWORD),	('ids', PTR_FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST),

    )
        

class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('LocalPorts', FW_PORTS),('RemotePorts', FW_PORTS),
    )


class U0(NDRUNION):
    union = {
        1: ('s0',S0),1: ('V4TypeCodeList',FW_ICMP_TYPE_CODE_LIST),58: ('V6TypeCodeList',FW_ICMP_TYPE_CODE_LIST),
    }
        

class FW_RULE(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', LPWSTR),('wszName', LPWSTR),('wszDescription', LPWSTR),('dwProfiles', DWORD),('Direction', FW_DIRECTION),('wIpProtocol', WORD),('u0', U0),('LocalAddresses', FW_ADDRESSES),('RemoteAddresses', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('wszLocalApplication', LPWSTR),('wszLocalService', LPWSTR),('Action', FW_RULE_ACTION),('wFlags', WORD),('wszRemoteMachineAuthorizationList', LPWSTR),('wszRemoteUserAuthorizationList', LPWSTR),('wszEmbeddedContext', LPWSTR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Status', FW_RULE_STATUS),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', LPWSTR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),('wszLocalUserAuthorizationList', WCHAR),('wszPackageId', WCHAR),('wszLocalUserOwner', WCHAR),('dwTrustTupleKeywords', DWORD),('OnNetworkNames', FW_NETWORK_NAMES),('wszSecurityRealmId', WCHAR),('wFlags2', WORD),('RemoteOutServerNames', FW_NETWORK_NAMES),('wszFqbn', WCHAR),('compartmentId', DWORD),('providerContextKey', GUID),('RemoteDynamicKeywordAddresses', FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST),
    )
class PFW_RULE(NDRPOINTER):
    referent = (
        ('Data', FW_RULE),
    )    


FW_PROFILE_CONFIG_INVALID = ,
FW_PROFILE_CONFIG_ENABLE_FW = ,
FW_PROFILE_CONFIG_DISABLE_STEALTH_MODE = ,
FW_PROFILE_CONFIG_SHIELDED = ,
FW_PROFILE_CONFIG_DISABLE_UNICAST_RESPONSES_TO_MULTICAST_BROADCAST = ,
FW_PROFILE_CONFIG_LOG_DROPPED_PACKETS = ,
FW_PROFILE_CONFIG_LOG_SUCCESS_CONNECTIONS = ,
FW_PROFILE_CONFIG_LOG_IGNORED_RULES = ,
FW_PROFILE_CONFIG_LOG_MAX_FILE_SIZE = ,
FW_PROFILE_CONFIG_LOG_FILE_PATH = ,
FW_PROFILE_CONFIG_DISABLE_INBOUND_NOTIFICATIONS = ,
FW_PROFILE_CONFIG_AUTH_APPS_ALLOW_USER_PREF_MERGE = ,
FW_PROFILE_CONFIG_GLOBAL_PORTS_ALLOW_USER_PREF_MERGE = ,
FW_PROFILE_CONFIG_ALLOW_LOCAL_POLICY_MERGE = ,
FW_PROFILE_CONFIG_ALLOW_LOCAL_IPSEC_POLICY_MERGE = ,
FW_PROFILE_CONFIG_DISABLED_INTERFACES = ,
FW_PROFILE_CONFIG_DEFAULT_OUTBOUND_ACTION = ,
FW_PROFILE_CONFIG_DEFAULT_INBOUND_ACTION = ,
FW_PROFILE_CONFIG_DISABLE_STEALTH_MODE_IPSEC_SECURED_PACKET_EXEMPTION = 
        

FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NONE = 0,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NEIGHBOR_DISC = 1,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ICMP = 2,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ROUTER_DISC = 4,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NEIGHBOR_DISC_RFC = FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ROUTER_DISC,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT_DHCP = 8,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT_MAX = 16
        

FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_NONE = 0,
FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_UTF_8 = 0
        

FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_NEVER = 0,
FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_SERVER_BEHIND_NAT = 0,
FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_SERVER_AND_CLIENT_BEHIND_NAT = 0
        

FW_GLOBAL_CONFIG_PACKET_QUEUE_NONE = ,
FW_GLOBAL_CONFIG_PACKET_QUEUE_INBOUND = ,
FW_GLOBAL_CONFIG_PACKET_QUEUE_FORWARD = 
        

FW_GLOBAL_CONFIG_INVALID = ,
FW_GLOBAL_CONFIG_POLICY_VERSION_SUPPORTED = ,
FW_GLOBAL_CONFIG_CURRENT_PROFILE = ,
FW_GLOBAL_CONFIG_DISABLE_STATEFUL_FTP = ,
FW_GLOBAL_CONFIG_DISABLE_STATEFUL_PPTP = ,
FW_GLOBAL_CONFIG_SA_IDLE_TIME = ,
FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING = ,
FW_GLOBAL_CONFIG_IPSEC_EXEMPT = ,
FW_GLOBAL_CONFIG_CRL_CHECK = ,
FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT = ,
FW_GLOBAL_CONFIG_POLICY_VERSION = ,
FW_GLOBAL_CONFIG_BINARY_VERSION_SUPPORTED = ,
FW_GLOBAL_CONFIG_IPSEC_TUNNEL_REMOTE_MACHINE_AUTHORIZATION_LIST = ,
FW_GLOBAL_CONFIG_IPSEC_TUNNEL_REMOTE_USER_AUTHORIZATION_LIST = ,
FW_GLOBAL_CONFIG_OPPORTUNISTICALLY_MATCH_AUTH_SET_PER_KM = ,
FW_GLOBAL_CONFIG_IPSEC_TRANSPORT_REMOTE_MACHINE_AUTHORIZATION_LIST = ,
FW_GLOBAL_CONFIG_IPSEC_TRANSPORT_REMOTE_USER_AUTHORIZATION_LIST = ,
FW_GLOBAL_CONFIG_ENABLE_PACKET_QUEUE = 
        

FW_CONFIG_FLAG_RETURN_DEFAULT_IF_NOT_FOUND = 1
        

class FW_NETWORK(NDRSTRUCT):
    structure = (
        ('pszName', WCHAR_T),('ProfileType', FW_PROFILE_TYPE),
    )
class PFW_NETWORK(NDRPOINTER):
    referent = (
        ('Data', FW_NETWORK),
    )    


class FW_ADAPTER(NDRSTRUCT):
    structure = (
        ('pszFriendlyName', WCHAR_T),('Guid', GUID),
    )
class PFW_ADAPTER(NDRPOINTER):
    referent = (
        ('Data', FW_ADAPTER),
    )    


class FW_DIAG_APP(NDRSTRUCT):
    structure = (
        ('pszAppPath', WCHAR_T),
    )
class PFW_DIAG_APP(NDRPOINTER):
    referent = (
        ('Data', FW_DIAG_APP),
    )    


FW_RULE_CATEGORY_BOOT = ,
FW_RULE_CATEGORY_STEALTH = ,
FW_RULE_CATEGORY_FIREWALL = ,
FW_RULE_CATEGORY_CONSEC = 
        

class DATA_FW_PRODUCT(NDRUniConformantArray):
    item = FW_RULE_CATEGORY

class PTR_FW_PRODUCT(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_PRODUCT),
    )

class FW_PRODUCT(NDRSTRUCT):
    structure = (
	('dwFlags', DWORD),	('dwNumRuleCategories', DWORD),	('pRuleCategories', PTR_FW_PRODUCT),
	('pszDisplayName', WCHAR_T),	('pszPathToSignedProductExe', WCHAR_T),
    )
        

FW_IP_VERSION_INVALID = ,
FW_IP_VERSION_V4 = ,
FW_IP_VERSION_V6 = 
        

FW_IPSEC_PHASE_INVALID = ,
FW_IPSEC_PHASE_1 = ,
FW_IPSEC_PHASE_2 = 
        

FW_CS_RULE_FLAGS_NONE = 0,
FW_CS_RULE_FLAGS_ACTIVE = 1,
FW_CS_RULE_FLAGS_DTM = 2,
FW_CS_RULE_FLAGS_TUNNEL_BYPASS_IF_ENCRYPTED = 8,
FW_CS_RULE_FLAGS_OUTBOUND_CLEAR = 16,
FW_CS_RULE_FLAGS_APPLY_AUTHZ = 32,
FW_CS_RULE_FLAGS_KEY_MANAGER_ALLOW_DICTATE_KEY = 64,
FW_CS_RULE_FLAGS_KEY_MANAGER_ALLOW_NOTIFY_KEY = 128,
FW_CS_RULE_FLAGS_SECURITY_REALM = 256,
FW_CS_RULE_FLAGS_MAX = 512,
FW_CS_RULE_FLAGS_MAX_V2_1 = 2,
FW_CS_RULE_FLAGS_MAX_V2_8 = 4,
FW_CS_RULE_FLAGS_MAX_V2_10 = 64,
FW_CS_RULE_FLAGS_MAX_V2_20 = 256
        

FW_CS_RULE_ACTION_INVALID = ,
FW_CS_RULE_ACTION_SECURE_SERVER = ,
FW_CS_RULE_ACTION_BOUNDARY = ,
FW_CS_RULE_ACTION_SECURE = ,
FW_CS_RULE_ACTION_DO_NOT_SECURE = 
        

class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class FW_CS_RULE2_0(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('dwProfiles', DWORD),('Endpoint1', FW_ADDRESSES),('Endpoint2', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('dwLocalTunnelEndpointV4', DWORD),('LocalTunnelEndpointV6', BYTE),('dwRemoteTunnelEndpointV4', DWORD),('RemoteTunnelEndpointV6', BYTE),('Endpoint1Ports', FW_PORTS),('Endpoint2Ports', FW_PORTS),('wIpProtocol', WORD),('wszPhase1AuthSet', WCHAR),('wszPhase2CryptoSet', WCHAR),('wszPhase2AuthSet', WCHAR),('Action', FW_CS_RULE_ACTION),('wFlags', WORD),('wszEmbeddedContext', WCHAR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),
    )
class PFW_CS_RULE2_0(NDRPOINTER):
    referent = (
        ('Data', FW_CS_RULE2_0),
    )    


FW_KEY_MODULE_DEFAULT = 0,
FW_KEY_MODULE_IKEv1 = 1,
FW_KEY_MODULE_AUTHIP = 2,
FW_KEY_MODULE_IKEv2 = 4,
FW_KEY_MODULE_MAX = 8
        

class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class FW_CS_RULE2_10(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('dwProfiles', DWORD),('Endpoint1', FW_ADDRESSES),('Endpoint2', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('dwLocalTunnelEndpointV4', DWORD),('LocalTunnelEndpointV6', BYTE),('dwRemoteTunnelEndpointV4', DWORD),('RemoteTunnelEndpointV6', BYTE),('Endpoint1Ports', FW_PORTS),('Endpoint2Ports', FW_PORTS),('wIpProtocol', WORD),('wszPhase1AuthSet', WCHAR),('wszPhase2CryptoSet', WCHAR),('wszPhase2AuthSet', WCHAR),('Action', FW_CS_RULE_ACTION),('wFlags', WORD),('wszEmbeddedContext', WCHAR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),('wszMMParentRuleId', WCHAR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),
    )
class PFW_CS_RULE2_10(NDRPOINTER):
    referent = (
        ('Data', FW_CS_RULE2_10),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class FW_CS_RULE(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('dwProfiles', DWORD),('Endpoint1', FW_ADDRESSES),('Endpoint2', FW_ADDRESSES),('LocalInterfaceIds', FW_INTERFACE_LUIDS),('dwLocalInterfaceTypes', DWORD),('dwLocalTunnelEndpointV4', DWORD),('LocalTunnelEndpointV6', BYTE),('dwRemoteTunnelEndpointV4', DWORD),('RemoteTunnelEndpointV6', BYTE),('Endpoint1Ports', FW_PORTS),('Endpoint2Ports', FW_PORTS),('wIpProtocol', WORD),('wszPhase1AuthSet', WCHAR),('wszPhase2CryptoSet', WCHAR),('wszPhase2AuthSet', WCHAR),('Action', FW_CS_RULE_ACTION),('wFlags', WORD),('wszEmbeddedContext', WCHAR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),('wszMMParentRuleId', WCHAR),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),('wszRemoteTunnelEndpointFqdn', WCHAR),('RemoteTunnelEndpoints', FW_ADDRESSES),('dwKeyModules', DWORD),('FwdPathSALifetime', DWORD),('wszTransportMachineAuthzSDDL', LPWSTR),('wszTransportUserAuthzSDDL', LPWSTR),
    )
class PFW_CS_RULE(NDRPOINTER):
    referent = (
        ('Data', FW_CS_RULE),
    )    


FW_AUTH_METHOD_INVALID = ,
FW_AUTH_METHOD_ANONYMOUS = ,
FW_AUTH_METHOD_MACHINE_KERB = ,
FW_AUTH_METHOD_MACHINE_SHKEY = ,
FW_AUTH_METHOD_MACHINE_NTLM = ,
FW_AUTH_METHOD_MACHINE_CERT = ,
FW_AUTH_METHOD_USER_KERB = ,
FW_AUTH_METHOD_USER_CERT = ,
FW_AUTH_METHOD_USER_NTLM = ,
FW_AUTH_METHOD_MACHINE_RESERVED = ,
FW_AUTH_METHOD_USER_RESERVED = ,
FW_AUTH_METHOD_MAX = ,
FW_AUTH_METHOD_MAX_2_10 = 1)
        

FW_AUTH_SUITE_FLAGS_NONE = 0,
FW_AUTH_SUITE_FLAGS_CERT_EXCLUDE_CA_NAME = 1,
FW_AUTH_SUITE_FLAGS_HEALTH_CERT = 2,
FW_AUTH_SUITE_FLAGS_PERFORM_CERT_ACCOUNT_MAPPING = 4,
FW_AUTH_SUITE_FLAGS_CERT_SIGNING_ECDSA256 = 8,
FW_AUTH_SUITE_FLAGS_CERT_SIGNING_ECDSA384 = 16,
FW_AUTH_SUITE_FLAGS_MAX_V2_1 = 32,
FW_AUTH_SUITE_FLAGS_INTERMEDIATE_CA = 32,
FW_AUTH_SUITE_FLAGS_MAX_V2_10 = 64,
FW_AUTH_SUITE_FLAGS_ALLOW_PROXY = 64,
FW_AUTH_SUITE_FLAGS_MAX = 128
        

class S0(NDRSTRUCT):
    structure = (
        ('wszCAName', WCHAR),
    )


class S1(NDRSTRUCT):
    structure = (
        ('wszSHKey', WCHAR),
    )


class U0(NDRUNION):
    union = {
        FW_AUTH_METHOD_MACHINE_SHKEY: ('s0',S0),FW_AUTH_METHOD_MACHINE_SHKEY: ('s1',S1),
    }
        

class FW_AUTH_SUITE2_10(NDRSTRUCT):
    structure = (
        ('Method', FW_AUTH_METHOD),('wFlags', WORD),('u0', U0),
    )
class PFW_AUTH_SUITE2_10(NDRPOINTER):
    referent = (
        ('Data', FW_AUTH_SUITE2_10),
    )    


FW_CERT_CRITERIA_NAME_NONE = ,
FW_CERT_CRITERIA_NAME_DNS = ,
FW_CERT_CRITERIA_NAME_UPN = ,
FW_CERT_CRITERIA_NAME_RFC822 = ,
FW_CERT_CRITERIA_NAME_CN = ,
FW_CERT_CRITERIA_NAME_OU = ,
FW_CERT_CRITERIA_NAME_O = ,
FW_CERT_CRITERIA_NAME_DC = 
        

FW_CERT_CRITERIA_TYPE_BOTH = ,
FW_CERT_CRITERIA_TYPE_SELECTION = ,
FW_CERT_CRITERIA_TYPE_VALIDATION = 
        

FW_AUTH_CERT_CRITERIA_FLAGS_NONE = 0,
FW_AUTH_CERT_CRITERIA_FLAGS_FOLLOW_RENEWAL = 1,
FW_AUTH_CERT_CRITERIA_FLAGS_MAX = 2
        

class DATA_FW_CERT_CRITERIA(NDRUniConformantArray):
    item = LPSTR

class PTR_FW_CERT_CRITERIA(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_CERT_CRITERIA),
    )

class FW_CERT_CRITERIA(NDRSTRUCT):
    structure = (
	('wSchemaVersion', WORD),	('wFlags', WORD),	('CertCriteriaType', FW_CERT_CRITERIA_TYPE),	('NameType', FW_CERT_CRITERIA_NAME_TYPE),	('wszName', LPWSTR),	('dwNumEku', DWORD),	('ppEku', PTR_FW_CERT_CRITERIA),
	('wszHash', LPWSTR),
    )
        

class S0(NDRSTRUCT):
    structure = (
        ('wszCAName', WCHAR),('pCertCriteria', PFW_CERT_CRITERIA),
    )


class S1(NDRSTRUCT):
    structure = (
        ('wszSHKey', WCHAR),
    )


class S2(NDRSTRUCT):
    structure = (
        ('wszProxyServer', WCHAR),
    )


class U0(NDRUNION):
    union = {
        FW_AUTH_METHOD_MACHINE_KERB: ('s0',S0),FW_AUTH_METHOD_MACHINE_KERB: ('s1',S1),FW_AUTH_METHOD_MACHINE_KERB: ('s2',S2),
    }
        

class FW_AUTH_SUITE(NDRSTRUCT):
    structure = (
        ('Method', FW_AUTH_METHOD),('wFlags', WORD),('u0', U0),
    )
class PFW_AUTH_SUITE(NDRPOINTER):
    referent = (
        ('Data', FW_AUTH_SUITE),
    )    


FW_AUTH_SET_FLAGS_NONE = 0,
FW_AUTH_SET_FLAGS_MAX = 1
        

class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class FW_AUTH_SET2_10(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('IpSecPhase', FW_IPSEC_PHASE),('wszSetId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('wszEmbeddedContext', WCHAR),('dwNumSuites', DWORD),('pSuites', PFW_AUTH_SUITE2_10),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),('dwAuthSetFlags', DWORD),
    )
class PFW_AUTH_SET2_10(NDRPOINTER):
    referent = (
        ('Data', FW_AUTH_SET2_10),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class FW_AUTH_SET(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('IpSecPhase', FW_IPSEC_PHASE),('wszSetId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('wszEmbeddedContext', WCHAR),('dwNumSuites', DWORD),('pSuites', PFW_AUTH_SUITE),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),('dwAuthSetFlags', DWORD),
    )
class PFW_AUTH_SET(NDRPOINTER):
    referent = (
        ('Data', FW_AUTH_SET),
    )    


FW_CRYPTO_KEY_EXCHANGE_NONE = 0,
FW_CRYPTO_KEY_EXCHANGE_DH1 = 0,
FW_CRYPTO_KEY_EXCHANGE_DH2 = 0,
FW_CRYPTO_KEY_EXCHANGE_ECDH256 = 0,
FW_CRYPTO_KEY_EXCHANGE_ECDH384 = 0,
FW_CRYPTO_KEY_EXCHANGE_DH2048 = 0,
FW_CRYPTO_KEY_EXCHANGE_DH24 = 0,
FW_CRYPTO_KEY_EXCHANGE_MAX = 0,
FW_CRYPTO_KEY_EXCHANGE_DH14 = FW_CRYPTO_KEY_EXCHANGE_DH2048,
FW_CRYPTO_KEY_EXCHANGE_MAX_V2_10 = FW_CRYPTO_KEY_EXCHANGE_DH24
        

FW_CRYPTO_ENCRYPTION_NONE = ,
FW_CRYPTO_ENCRYPTION_DES = ,
FW_CRYPTO_ENCRYPTION_3DES = ,
FW_CRYPTO_ENCRYPTION_AES128 = ,
FW_CRYPTO_ENCRYPTION_AES192 = ,
FW_CRYPTO_ENCRYPTION_AES256 = ,
FW_CRYPTO_ENCRYPTION_AES_GCM128 = ,
FW_CRYPTO_ENCRYPTION_AES_GCM192 = ,
FW_CRYPTO_ENCRYPTION_AES_GCM256 = ,
FW_CRYPTO_ENCRYPTION_MAX = ,
FW_CRYPTO_ENCRYPTION_MAX_V2_0 = FW_CRYPTO_ENCRYPTION_AES_GCM128
        

FW_CRYPTO_HASH_NONE = ,
FW_CRYPTO_HASH_MD5 = ,
FW_CRYPTO_HASH_SHA1 = ,
FW_CRYPTO_HASH_SHA256 = ,
FW_CRYPTO_HASH_SHA384 = ,
FW_CRYPTO_HASH_AES_GMAC128 = ,
FW_CRYPTO_HASH_AES_GMAC192 = ,
FW_CRYPTO_HASH_AES_GMAC256 = ,
FW_CRYPTO_HASH_MAX = ,
FW_CRYPTO_HASH_MAX_V2_0 = FW_CRYPTO_HASH_SHA256
        

FW_CRYPTO_PROTOCOL_INVALID = ,
FW_CRYPTO_PROTOCOL_AH = ,
FW_CRYPTO_PROTOCOL_ESP = ,
FW_CRYPTO_PROTOCOL_BOTH = ,
FW_CRYPTO_PROTOCOL_AUTH_NO_ENCAP = ,
FW_CRYPTO_PROTOCOL_MAX = ,
FW_CRYPTO_PROTOCOL_MAX_2_1 = 1)
        

FW_CRYPTO_SET_FLAGS_NONE = 0,
FW_CRYPTO_SET_FLAGS_MAX = 1
        

class FW_PHASE1_CRYPTO_SUITE(NDRSTRUCT):
    structure = (
        ('KeyExchange', FW_CRYPTO_KEY_EXCHANGE_TYPE),('Encryption', FW_CRYPTO_ENCRYPTION_TYPE),('Hash', FW_CRYPTO_HASH_TYPE),('dwP1CryptoSuiteFlags', DWORD),
    )
class PFW_PHASE1_CRYPTO_SUITE(NDRPOINTER):
    referent = (
        ('Data', FW_PHASE1_CRYPTO_SUITE),
    )    


class FW_PHASE2_CRYPTO_SUITE(NDRSTRUCT):
    structure = (
        ('Protocol', FW_CRYPTO_PROTOCOL_TYPE),('AhHash', FW_CRYPTO_HASH_TYPE),('EspHash', FW_CRYPTO_HASH_TYPE),('Encryption', FW_CRYPTO_ENCRYPTION_TYPE),('dwTimeoutMinutes', DWORD),('dwTimeoutKBytes', DWORD),('dwP2CryptoSuiteFlags', DWORD),
    )
class PFW_PHASE2_CRYPTO_SUITE(NDRPOINTER):
    referent = (
        ('Data', FW_PHASE2_CRYPTO_SUITE),
    )    


FW_PHASE1_CRYPTO_FLAGS_NONE = 0,
FW_PHASE1_CRYPTO_FLAGS_DO_NOT_SKIP_DH = 1,
FW_PHASE1_CRYPTO_FLAGS_MAX = 2
        

FW_PHASE2_CRYPTO_PFS_INVALID = ,
FW_PHASE2_CRYPTO_PFS_DISABLE = ,
FW_PHASE2_CRYPTO_PFS_PHASE1 = ,
FW_PHASE2_CRYPTO_PFS_DH1 = ,
FW_PHASE2_CRYPTO_PFS_DH2 = ,
FW_PHASE2_CRYPTO_PFS_DH2048 = ,
FW_PHASE2_CRYPTO_PFS_ECDH256 = ,
FW_PHASE2_CRYPTO_PFS_ECDH384 = ,
FW_PHASE2_CRYPTO_PFS_DH24 = ,
FW_PHASE2_CRYPTO_PFS_MAX = ,
FW_PHASE2_CRYPTO_PFS_MAX_V2_10 = FW_PHASE2_CRYPTO_PFS_DH24
        

class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class S0(NDRSTRUCT):
    structure = (
        ('wFlags', WORD),('dwNumPhase1Suites', DWORD),('pPhase1Suites', PFW_PHASE1_CRYPTO_SUITE),('dwTimeOutMinutes', DWORD),('dwTimeOutSessions', DWORD),
    )


class S1(NDRSTRUCT):
    structure = (
        ('Pfs', FW_PHASE2_CRYPTO_PFS),('dwNumPhase2Suites', DWORD),('pPhase2Suites', PFW_PHASE2_CRYPTO_SUITE),
    )


class U0(NDRUNION):
    union = {
        FW_IPSEC_PHASE_2: ('s0',S0),FW_IPSEC_PHASE_2: ('s1',S1),
    }
        

class FW_CRYPTO_SET(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('IpSecPhase', FW_IPSEC_PHASE),('wszSetId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('wszEmbeddedContext', WCHAR),('u0', U0),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),('dwCryptoSetFlags', DWORD),
    )
class PFW_CRYPTO_SET(NDRPOINTER):
    referent = (
        ('Data', FW_CRYPTO_SET),
    )    


class DATA_FW_BYTE_BLOB(NDRUniConformantArray):
    item = BYTE

class PTR_FW_BYTE_BLOB(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_BYTE_BLOB),
    )

class FW_BYTE_BLOB(NDRSTRUCT):
    structure = (
	('dwSize', DWORD),	('Blob', PTR_FW_BYTE_BLOB),

    )
        

class FW_COOKIE_PAIR(NDRSTRUCT):
    structure = (
        ('Initiator', UINT64),('Responder', UINT64),
    )
class PFW_COOKIE_PAIR(NDRPOINTER):
    referent = (
        ('Data', FW_COOKIE_PAIR),
    )    


FW_PHASE1_KEY_MODULE_INVALID = ,
FW_PHASE1_KEY_MODULE_IKE = ,
FW_PHASE1_KEY_MODULE_AUTH_IP = 
        

class FW_CERT_INFO(NDRSTRUCT):
    structure = (
        ('SubjectName', FW_BYTE_BLOB),('dwCertFlags', DWORD),
    )
class PFW_CERT_INFO(NDRPOINTER):
    referent = (
        ('Data', FW_CERT_INFO),
    )    


class S0(NDRSTRUCT):
    structure = (
        ('MyCert', FW_CERT_INFO),('PeerCert', FW_CERT_INFO),
    )


class S1(NDRSTRUCT):
    structure = (
        ('wszMyId', WCHAR),('wszPeerId', WCHAR),
    )


class U0(NDRUNION):
    union = {
        FW_AUTH_METHOD_MACHINE_KERB: ('s0',S0),FW_AUTH_METHOD_MACHINE_KERB: ('s1',S1),
    }
        

class FW_AUTH_INFO(NDRSTRUCT):
    structure = (
        ('AuthMethod', FW_AUTH_METHOD),('u0', U0),('dwAuthInfoFlags', DWORD),
    )
class PFW_AUTH_INFO(NDRPOINTER):
    referent = (
        ('Data', FW_AUTH_INFO),
    )    


class FW_ENDPOINTS(NDRSTRUCT):
    structure = (
        ('IpVersion', FW_IP_VERSION),('dwSourceV4Address', DWORD),('dwDestinationV4Address', DWORD),('SourceV6Address', BYTE),('DestinationV6Address', BYTE),
    )
class PFW_ENDPOINTS(NDRPOINTER):
    referent = (
        ('Data', FW_ENDPOINTS),
    )    


class FW_PHASE1_SA_DETAILS(NDRSTRUCT):
    structure = (
        ('SaId', UINT64),('KeyModuleType', FW_PHASE1_KEY_MODULE_TYPE),('Endpoints', FW_ENDPOINTS),('SelectedProposal', FW_PHASE1_CRYPTO_SUITE),('dwProposalLifetimeKBytes', DWORD),('dwProposalLifetimeMinutes', DWORD),('dwProposalMaxNumPhase2', DWORD),('CookiePair', FW_COOKIE_PAIR),('pFirstAuth', PFW_AUTH_INFO),('pSecondAuth', PFW_AUTH_INFO),('dwP1SaFlags', DWORD),
    )
class PFW_PHASE1_SA_DETAILS(NDRPOINTER):
    referent = (
        ('Data', FW_PHASE1_SA_DETAILS),
    )    


FW_PHASE2_TRAFFIC_TYPE_INVALID = ,
FW_PHASE2_TRAFFIC_TYPE_TRANSPORT = ,
FW_PHASE2_TRAFFIC_TYPE_TUNNEL = 
        

class FW_PHASE2_SA_DETAILS(NDRSTRUCT):
    structure = (
        ('SaId', UINT64),('Direction', FW_DIRECTION),('Endpoints', FW_ENDPOINTS),('wLocalPort', WORD),('wRemotePort', WORD),('wIpProtocol', WORD),('SelectedProposal', FW_PHASE2_CRYPTO_SUITE),('Pfs', FW_PHASE2_CRYPTO_PFS),('TransportFilterId', GUID),('dwP2SaFlags', DWORD),
    )
class PFW_PHASE2_SA_DETAILS(NDRPOINTER):
    referent = (
        ('Data', FW_PHASE2_SA_DETAILS),
    )    


class FW_PROFILE_CONFIG_VALUE(NDRUNION):
    union = {
        FW_PROFILE_CONFIG_LOG_FILE_PATH: ('wszStr',WCHAR),FW_PROFILE_CONFIG_DISABLED_INTERFACES: ('pDisabledInterfaces',PFW_INTERFACE_LUIDS),FW_PROFILE_CONFIG_ENABLE_FW: ('pdwVal',DWORD),
    }
        class PFW_PROFILE_CONFIG_VALUE(NDRPOINTER):
    referent = (
        ('Data', FW_PROFILE_CONFIG_VALUE),
    )    


class PNEXT(NDRSTRUCT):
    structure = (
        
    )


class FW_MM_RULE(NDRSTRUCT):
    structure = (
        ('PNEXT', PNEXT),('wSchemaVersion', WORD),('wszRuleId', WCHAR),('wszName', WCHAR),('wszDescription', WCHAR),('dwProfiles', DWORD),('Endpoint1', FW_ADDRESSES),('Endpoint2', FW_ADDRESSES),('wszPhase1AuthSet', WCHAR),('wszPhase1CryptoSet', WCHAR),('wFlags', WORD),('wszEmbeddedContext', WCHAR),('PlatformValidityList', FW_OS_PLATFORM_LIST),('Origin', FW_RULE_ORIGIN_TYPE),('wszGPOName', WCHAR),('Status', FW_RULE_STATUS),('Reserved', DWORD),('pMetaData', PFW_OBJECT_METADATA),
    )
class PFW_MM_RULE(NDRPOINTER):
    referent = (
        ('Data', FW_MM_RULE),
    )    


FW_MATCH_KEY_PROFILE = ,
FW_MATCH_KEY_STATUS = ,
FW_MATCH_KEY_OBJECTID = ,
FW_MATCH_KEY_FILTERID = ,
FW_MATCH_KEY_APP_PATH = ,
FW_MATCH_KEY_PROTOCOL = ,
FW_MATCH_KEY_LOCAL_PORT = ,
FW_MATCH_KEY_REMOTE_PORT = ,
FW_MATCH_KEY_GROUP = ,
FW_MATCH_KEY_SVC_NAME = ,
FW_MATCH_KEY_DIRECTION = ,
FW_MATCH_KEY_LOCAL_USER_OWNER = ,
FW_MATCH_KEY_PACKAGE_ID = ,
FW_MATCH_KEY_FQBN = ,
FW_MATCH_KEY_COMPARTMENT_ID = 
        

FW_DATA_TYPE_EMPTY = ,
FW_DATA_TYPE_UINT8 = ,
FW_DATA_TYPE_UINT16 = ,
FW_DATA_TYPE_UINT32 = ,
FW_DATA_TYPE_UINT64 = 
        

class S0(NDRSTRUCT):
    structure = (
        ('wszString', LPWSTR),
    )


class U0(NDRUNION):
    union = {
        FW_DATA_TYPE_UINT8: ('uInt8',UINT8),FW_DATA_TYPE_UINT16: ('uInt16',UINT16),FW_DATA_TYPE_UINT32: ('uInt32',UINT32),FW_DATA_TYPE_UINT64: ('uInt64',UINT64),FW_DATA_TYPE_EMPTY: ('s0',S0),
    }
        

class FW_MATCH_VALUE(NDRSTRUCT):
    structure = (
        ('type', FW_DATA_TYPE),('u0', U0),
    )


FW_MATCH_TYPE_TRAFFIC_MATCH = ,
FW_MATCH_TYPE_EQUAL = 
        

class FW_QUERY_CONDITION(NDRSTRUCT):
    structure = (
        ('matchKey', FW_MATCH_KEY),('matchType', FW_MATCH_TYPE),('matchValue', FW_MATCH_VALUE),
    )
class PFW_QUERY_CONDITION(NDRPOINTER):
    referent = (
        ('Data', FW_QUERY_CONDITION),
    )    


class DATA_FW_QUERY_CONDITIONS(NDRUniConformantArray):
    item = FW_QUERY_CONDITION

class PTR_FW_QUERY_CONDITIONS(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_QUERY_CONDITIONS),
    )

class FW_QUERY_CONDITIONS(NDRSTRUCT):
    structure = (
	('dwNumEntries', DWORD),	('AndedConditions', PTR_FW_QUERY_CONDITIONS),

    )
        

class DATA_FW_QUERY(NDRUniConformantArray):
    item = FW_QUERY_CONDITIONS

class PTR_FW_QUERY(NDRPOINTER):
    referent = (
        ('Data', DATA_FW_QUERY),
    )

class FW_QUERY(NDRSTRUCT):
    structure = (
	('wSchemaVersion', WORD),	('dwNumEntries', UINT32),	('ORConditions', PTR_FW_QUERY),
	('Status', FW_RULE_STATUS),
    )
        
#################################################################################

#INTERFACE DEFINITION

#################################################################################

#################################################################################

#RemoteFW Definition

#################################################################################

MSRPC_UUID_REMOTEFW = uuidtup_to_bin(('6b5bdd1e-528c-422c-af8c-a4079be4fe48','0.0'))

FW_CONN_HANDLE = HANDLE_T
FW_POLICY_STORE_HANDLE = HANDLE
PFW_POLICY_STORE_HANDLE = FW_POLICY_STORE_HANDLE
FW_PRODUCT_HANDLE = VOID

class RRPC_FWOpenPolicyStore(NDRCALL):
    opnum = 0
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('BinaryVersion', WORD),
		('StoreType', FW_STORE_TYPE),
		('AccessRight', FW_POLICY_ACCESS_RIGHT),
		('dwFlags', DWORD),
    )

class RRPC_FWOpenPolicyStoreResponse(NDRCALL):
    structure = (
		('phPolicyStore', PFW_POLICY_STORE_HANDLE),
    )
        

class RRPC_FWClosePolicyStore(NDRCALL):
    opnum = 1
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('phPolicyStore', PFW_POLICY_STORE_HANDLE),
    )

class RRPC_FWClosePolicyStoreResponse(NDRCALL):
    structure = (
		('phPolicyStore', PFW_POLICY_STORE_HANDLE),
    )
        

class RRPC_FWRestoreDefaults(NDRCALL):
    opnum = 2
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
    )

class RRPC_FWRestoreDefaultsResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWGetGlobalConfig(NDRCALL):
    opnum = 3
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('BinaryVersion', WORD),
		('StoreType', FW_STORE_TYPE),
		('configID', FW_GLOBAL_CONFIG),
		('dwFlags', DWORD),
		('pBuffer', BYTE),
		('cbData', DWORD),
		('pcbTransmittedLen', LPDWORD),
    )

class RRPC_FWGetGlobalConfigResponse(NDRCALL):
    structure = (
		('pBuffer', BYTE),
		('pcbTransmittedLen', LPDWORD),
		('pcbRequired', LPDWORD),
    )
        

class RRPC_FWSetGlobalConfig(NDRCALL):
    opnum = 4
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('BinaryVersion', WORD),
		('StoreType', FW_STORE_TYPE),
		('configID', FW_GLOBAL_CONFIG),
		('lpBuffer', BYTE),
		('dwBufSize', DWORD),
    )

class RRPC_FWSetGlobalConfigResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWAddFirewallRule(NDRCALL):
    opnum = 5
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_0),
    )

class RRPC_FWAddFirewallRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWSetFirewallRule(NDRCALL):
    opnum = 6
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_0),
    )

class RRPC_FWSetFirewallRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteFirewallRule(NDRCALL):
    opnum = 7
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('wszRuleID', LPCWSTR),
    )

class RRPC_FWDeleteFirewallRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteAllFirewallRules(NDRCALL):
    opnum = 8
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
    )

class RRPC_FWDeleteAllFirewallRulesResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWEnumFirewallRules(NDRCALL):
    opnum = 9
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRulesResponse(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_0),
    )
        

class RRPC_FWGetConfig(NDRCALL):
    opnum = 10
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('configID', FW_PROFILE_CONFIG),
		('Profile', FW_PROFILE_TYPE),
		('dwFlags', DWORD),
		('pBuffer', BYTE),
		('cbData', DWORD),
		('pcbTransmittedLen', LPDWORD),
    )

class RRPC_FWGetConfigResponse(NDRCALL):
    structure = (
		('pBuffer', BYTE),
		('pcbTransmittedLen', LPDWORD),
		('pcbRequired', LPDWORD),
    )
        

class RRPC_FWSetConfig(NDRCALL):
    opnum = 11
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('configID', FW_PROFILE_CONFIG),
		('Profile', FW_PROFILE_TYPE),
		('pConfig', FW_PROFILE_CONFIG_VALUE),
		('dwBufSize', DWORD),
    )

class RRPC_FWSetConfigResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWAddConnectionSecurityRule(NDRCALL):
    opnum = 12
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_CS_RULE2_0),
    )

class RRPC_FWAddConnectionSecurityRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWSetConnectionSecurityRule(NDRCALL):
    opnum = 13
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_CS_RULE2_0),
    )

class RRPC_FWSetConnectionSecurityRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteConnectionSecurityRule(NDRCALL):
    opnum = 14
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRuleId', LPWSTR),
    )

class RRPC_FWDeleteConnectionSecurityRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteAllConnectionSecurityRules(NDRCALL):
    opnum = 15
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
    )

class RRPC_FWDeleteAllConnectionSecurityRulesResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWEnumConnectionSecurityRules(NDRCALL):
    opnum = 16
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumConnectionSecurityRulesResponse(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_CS_RULE2_0),
    )
        

class RRPC_FWAddAuthenticationSet(NDRCALL):
    opnum = 17
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pAuth', PFW_AUTH_SET2_10),
    )

class RRPC_FWAddAuthenticationSetResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWSetAuthenticationSet(NDRCALL):
    opnum = 18
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pAuth', PFW_AUTH_SET2_10),
    )

class RRPC_FWSetAuthenticationSetResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteAuthenticationSet(NDRCALL):
    opnum = 19
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('wszSetId', LPCWSTR),
    )

class RRPC_FWDeleteAuthenticationSetResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteAllAuthenticationSets(NDRCALL):
    opnum = 20
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
    )

class RRPC_FWDeleteAllAuthenticationSetsResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWEnumAuthenticationSets(NDRCALL):
    opnum = 21
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('dwFilteredByStatus', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumAuthenticationSetsResponse(NDRCALL):
    structure = (
		('pdwNumAuthSets', DWORD),
		('ppAuth', PFW_AUTH_SET2_10),
    )
        

class RRPC_FWAddCryptoSet(NDRCALL):
    opnum = 22
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pCrypto', PFW_CRYPTO_SET),
    )

class RRPC_FWAddCryptoSetResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWSetCryptoSet(NDRCALL):
    opnum = 23
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pCrypto', PFW_CRYPTO_SET),
    )

class RRPC_FWSetCryptoSetResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteCryptoSet(NDRCALL):
    opnum = 24
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('wszSetId', LPCWSTR),
    )

class RRPC_FWDeleteCryptoSetResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteAllCryptoSets(NDRCALL):
    opnum = 25
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
    )

class RRPC_FWDeleteAllCryptoSetsResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWEnumCryptoSets(NDRCALL):
    opnum = 26
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('dwFilteredByStatus', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumCryptoSetsResponse(NDRCALL):
    structure = (
		('pdwNumSets', DWORD),
		('ppCryptoSets', PFW_CRYPTO_SET),
    )
        

class RRPC_FWEnumPhase1SAs(NDRCALL):
    opnum = 27
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pEndpoints', PFW_ENDPOINTS),
    )

class RRPC_FWEnumPhase1SAsResponse(NDRCALL):
    structure = (
		('pdwNumSAs', DWORD),
		('ppSAs', PFW_PHASE1_SA_DETAILS),
    )
        

class RRPC_FWEnumPhase2SAs(NDRCALL):
    opnum = 28
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pEndpoints', PFW_ENDPOINTS),
    )

class RRPC_FWEnumPhase2SAsResponse(NDRCALL):
    structure = (
		('pdwNumSAs', DWORD),
		('ppSAs', PFW_PHASE2_SA_DETAILS),
    )
        

class RRPC_FWDeletePhase1SAs(NDRCALL):
    opnum = 29
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pEndpoints', PFW_ENDPOINTS),
    )

class RRPC_FWDeletePhase1SAsResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeletePhase2SAs(NDRCALL):
    opnum = 30
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pEndpoints', PFW_ENDPOINTS),
    )

class RRPC_FWDeletePhase2SAsResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWEnumProducts(NDRCALL):
    opnum = 31
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
    )

class RRPC_FWEnumProductsResponse(NDRCALL):
    structure = (
		('pdwNumProducts', DWORD),
		('ppProducts', PFW_PRODUCT),
    )
        

class RRPC_FWAddMainModeRule(NDRCALL):
    opnum = 32
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pMMRule', PFW_MM_RULE),
    )

class RRPC_FWAddMainModeRuleResponse(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetMainModeRule(NDRCALL):
    opnum = 33
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pMMRule', PFW_MM_RULE),
    )

class RRPC_FWSetMainModeRuleResponse(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWDeleteMainModeRule(NDRCALL):
    opnum = 34
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRuleId', LPWSTR),
    )

class RRPC_FWDeleteMainModeRuleResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWDeleteAllMainModeRules(NDRCALL):
    opnum = 35
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
    )

class RRPC_FWDeleteAllMainModeRulesResponse(NDRCALL):
    structure = (

    )
        

class RRPC_FWEnumMainModeRules(NDRCALL):
    opnum = 36
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumMainModeRulesResponse(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppMMRules', PFW_MM_RULE),
    )
        

class RRPC_FWQueryFirewallRules(NDRCALL):
    opnum = 37
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRulesResponse(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_10),
    )
        

class RRPC_FWQueryConnectionSecurityRules2_10(NDRCALL):
    opnum = 38
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryConnectionSecurityRules2_10Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_CS_RULE2_10),
    )
        

class RRPC_FWQueryMainModeRules(NDRCALL):
    opnum = 39
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryMainModeRulesResponse(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppMMRules', PFW_MM_RULE),
    )
        

class RRPC_FWQueryAuthenticationSets(NDRCALL):
    opnum = 40
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IPsecPhase', FW_IPSEC_PHASE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryAuthenticationSetsResponse(NDRCALL):
    structure = (
		('pdwNumSets', DWORD),
		('ppAuthSets', PFW_AUTH_SET2_10),
    )
        

class RRPC_FWQueryCryptoSets(NDRCALL):
    opnum = 41
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IPsecPhase', FW_IPSEC_PHASE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryCryptoSetsResponse(NDRCALL):
    structure = (
		('pdwNumSets', DWORD),
		('ppCryptoSets', PFW_CRYPTO_SET),
    )
        

class RRPC_FWEnumNetworks(NDRCALL):
    opnum = 42
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
    )

class RRPC_FWEnumNetworksResponse(NDRCALL):
    structure = (
		('pdwNumNetworks', DWORD),
		('ppNetworks', PFW_NETWORK),
    )
        

class RRPC_FWEnumAdapters(NDRCALL):
    opnum = 43
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
    )

class RRPC_FWEnumAdaptersResponse(NDRCALL):
    structure = (
		('pdwNumAdapters', DWORD),
		('ppAdapters', PFW_ADAPTER),
    )
        

class RRPC_FWGetGlobalConfig2_10(NDRCALL):
    opnum = 44
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('BinaryVersion', WORD),
		('StoreType', FW_STORE_TYPE),
		('configID', FW_GLOBAL_CONFIG),
		('dwFlags', DWORD),
		('pBuffer', BYTE),
		('cbData', DWORD),
		('pcbTransmittedLen', LPDWORD),
    )

class RRPC_FWGetGlobalConfig2_10Response(NDRCALL):
    structure = (
		('pBuffer', BYTE),
		('pcbTransmittedLen', LPDWORD),
		('pcbRequired', LPDWORD),
		('pOrigin', FW_RULE_ORIGIN_TYPE),
    )
        

class RRPC_FWGetConfig2_10(NDRCALL):
    opnum = 45
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('configID', FW_PROFILE_CONFIG),
		('Profile', FW_PROFILE_TYPE),
		('dwFlags', DWORD),
		('pBuffer', BYTE),
		('cbData', DWORD),
		('pcbTransmittedLen', LPDWORD),
    )

class RRPC_FWGetConfig2_10Response(NDRCALL):
    structure = (
		('pBuffer', BYTE),
		('pcbTransmittedLen', LPDWORD),
		('pcbRequired', LPDWORD),
		('pOrigin', FW_RULE_ORIGIN_TYPE),
    )
        

class RRPC_FWAddFirewallRule2_10(NDRCALL):
    opnum = 46
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_10),
    )

class RRPC_FWAddFirewallRule2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_10(NDRCALL):
    opnum = 47
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_10),
    )

class RRPC_FWSetFirewallRule2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_10(NDRCALL):
    opnum = 48
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_10Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_10),
    )
        

class RRPC_FWAddConnectionSecurityRule2_10(NDRCALL):
    opnum = 49
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_CS_RULE2_10),
    )

class RRPC_FWAddConnectionSecurityRule2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetConnectionSecurityRule2_10(NDRCALL):
    opnum = 50
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_CS_RULE2_10),
    )

class RRPC_FWSetConnectionSecurityRule2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumConnectionSecurityRules2_10(NDRCALL):
    opnum = 51
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumConnectionSecurityRules2_10Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_CS_RULE2_10),
    )
        

class RRPC_FWAddAuthenticationSet2_10(NDRCALL):
    opnum = 52
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pAuth', PFW_AUTH_SET2_10),
    )

class RRPC_FWAddAuthenticationSet2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetAuthenticationSet2_10(NDRCALL):
    opnum = 53
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pAuth', PFW_AUTH_SET2_10),
    )

class RRPC_FWSetAuthenticationSet2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumAuthenticationSets2_10(NDRCALL):
    opnum = 54
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('dwFilteredByStatus', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumAuthenticationSets2_10Response(NDRCALL):
    structure = (
		('pdwNumAuthSets', DWORD),
		('ppAuth', PFW_AUTH_SET2_10),
    )
        

class RRPC_FWAddCryptoSet2_10(NDRCALL):
    opnum = 55
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pCrypto', PFW_CRYPTO_SET),
    )

class RRPC_FWAddCryptoSet2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetCryptoSet2_10(NDRCALL):
    opnum = 56
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pCrypto', PFW_CRYPTO_SET),
    )

class RRPC_FWSetCryptoSet2_10Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumCryptoSets2_10(NDRCALL):
    opnum = 57
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('dwFilteredByStatus', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumCryptoSets2_10Response(NDRCALL):
    structure = (
		('pdwNumSets', DWORD),
		('ppCryptoSets', PFW_CRYPTO_SET),
    )
        

class RRPC_FWAddConnectionSecurityRule2_20(NDRCALL):
    opnum = 58
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_CS_RULE),
    )

class RRPC_FWAddConnectionSecurityRule2_20Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetConnectionSecurityRule2_20(NDRCALL):
    opnum = 59
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_CS_RULE),
    )

class RRPC_FWSetConnectionSecurityRule2_20Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumConnectionSecurityRules2_20(NDRCALL):
    opnum = 60
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumConnectionSecurityRules2_20Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_CS_RULE),
    )
        

class RRPC_FWQueryConnectionSecurityRules2_20(NDRCALL):
    opnum = 61
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryConnectionSecurityRules2_20Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_CS_RULE),
    )
        

class RRPC_FWAddAuthenticationSet2_20(NDRCALL):
    opnum = 62
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pAuth', PFW_AUTH_SET),
    )

class RRPC_FWAddAuthenticationSet2_20Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetAuthenticationSet2_20(NDRCALL):
    opnum = 63
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pAuth', PFW_AUTH_SET),
    )

class RRPC_FWSetAuthenticationSet2_20Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumAuthenticationSets2_20(NDRCALL):
    opnum = 64
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IpSecPhase', FW_IPSEC_PHASE),
		('dwFilteredByStatus', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumAuthenticationSets2_20Response(NDRCALL):
    structure = (
		('pdwNumAuthSets', DWORD),
		('ppAuth', PFW_AUTH_SET),
    )
        

class RRPC_FWQueryAuthenticationSets2_20(NDRCALL):
    opnum = 65
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('IPsecPhase', FW_IPSEC_PHASE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryAuthenticationSets2_20Response(NDRCALL):
    structure = (
		('pdwNumSets', DWORD),
		('ppAuthSets', PFW_AUTH_SET),
    )
        

class RRPC_FWAddFirewallRule2_20(NDRCALL):
    opnum = 66
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_20),
    )

class RRPC_FWAddFirewallRule2_20Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_20(NDRCALL):
    opnum = 67
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_20),
    )

class RRPC_FWSetFirewallRule2_20Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_20(NDRCALL):
    opnum = 68
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_20Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_20),
    )
        

class RRPC_FWQueryFirewallRules2_20(NDRCALL):
    opnum = 69
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRules2_20Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_20),
    )
        

class RRPC_FWAddFirewallRule2_24(NDRCALL):
    opnum = 70
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_24),
    )

class RRPC_FWAddFirewallRule2_24Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_24(NDRCALL):
    opnum = 71
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_24),
    )

class RRPC_FWSetFirewallRule2_24Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_24(NDRCALL):
    opnum = 72
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_24Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_24),
    )
        

class RRPC_FWQueryFirewallRules2_24(NDRCALL):
    opnum = 73
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRules2_24Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_24),
    )
        

class RRPC_FWAddFirewallRule2_25(NDRCALL):
    opnum = 74
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_25),
    )

class RRPC_FWAddFirewallRule2_25Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_25(NDRCALL):
    opnum = 75
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_25),
    )

class RRPC_FWSetFirewallRule2_25Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_25(NDRCALL):
    opnum = 76
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_25Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_25),
    )
        

class RRPC_FWQueryFirewallRules2_25(NDRCALL):
    opnum = 77
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRules2_25Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_25),
    )
        

class RRPC_FWAddFirewallRule2_26(NDRCALL):
    opnum = 78
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_26),
    )

class RRPC_FWAddFirewallRule2_26Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_26(NDRCALL):
    opnum = 79
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_26),
    )

class RRPC_FWSetFirewallRule2_26Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_26(NDRCALL):
    opnum = 80
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_26Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_26),
    )
        

class RRPC_FWQueryFirewallRules2_26(NDRCALL):
    opnum = 81
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRules2_26Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_26),
    )
        

class RRPC_FWAddFirewallRule2_27(NDRCALL):
    opnum = 82
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_27),
    )

class RRPC_FWAddFirewallRule2_27Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_27(NDRCALL):
    opnum = 83
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE2_27),
    )

class RRPC_FWSetFirewallRule2_27Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_27(NDRCALL):
    opnum = 84
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_27Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_27),
    )
        

class RRPC_FWQueryFirewallRules2_27(NDRCALL):
    opnum = 85
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRules2_27Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE2_27),
    )
        

class RRPC_FWAddFirewallRule2_31(NDRCALL):
    opnum = 86
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE),
    )

class RRPC_FWAddFirewallRule2_31Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWSetFirewallRule2_31(NDRCALL):
    opnum = 87
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pRule', PFW_RULE),
    )

class RRPC_FWSetFirewallRule2_31Response(NDRCALL):
    structure = (
		('pStatus', FW_RULE_STATUS),
    )
        

class RRPC_FWEnumFirewallRules2_31(NDRCALL):
    opnum = 88
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('dwFilteredByStatus', DWORD),
		('dwProfileFilter', DWORD),
		('wFlags', WORD),
    )

class RRPC_FWEnumFirewallRules2_31Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE),
    )
        

class RRPC_FWQueryFirewallRules2_31(NDRCALL):
    opnum = 89
    structure = (
		('rpcConnHandle', FW_CONN_HANDLE),
		('hPolicyStore', FW_POLICY_STORE_HANDLE),
		('pQuery', PFW_QUERY),
		('wFlags', WORD),
    )

class RRPC_FWQueryFirewallRules2_31Response(NDRCALL):
    structure = (
		('pdwNumRules', DWORD),
		('ppRules', PFW_RULE),
    )
        
OPNUMS = {
0 : (RRPC_FWOpenPolicyStore,RRPC_FWOpenPolicyStoreResponse),
1 : (RRPC_FWClosePolicyStore,RRPC_FWClosePolicyStoreResponse),
2 : (RRPC_FWRestoreDefaults,RRPC_FWRestoreDefaultsResponse),
3 : (RRPC_FWGetGlobalConfig,RRPC_FWGetGlobalConfigResponse),
4 : (RRPC_FWSetGlobalConfig,RRPC_FWSetGlobalConfigResponse),
5 : (RRPC_FWAddFirewallRule,RRPC_FWAddFirewallRuleResponse),
6 : (RRPC_FWSetFirewallRule,RRPC_FWSetFirewallRuleResponse),
7 : (RRPC_FWDeleteFirewallRule,RRPC_FWDeleteFirewallRuleResponse),
8 : (RRPC_FWDeleteAllFirewallRules,RRPC_FWDeleteAllFirewallRulesResponse),
9 : (RRPC_FWEnumFirewallRules,RRPC_FWEnumFirewallRulesResponse),
10 : (RRPC_FWGetConfig,RRPC_FWGetConfigResponse),
11 : (RRPC_FWSetConfig,RRPC_FWSetConfigResponse),
12 : (RRPC_FWAddConnectionSecurityRule,RRPC_FWAddConnectionSecurityRuleResponse),
13 : (RRPC_FWSetConnectionSecurityRule,RRPC_FWSetConnectionSecurityRuleResponse),
14 : (RRPC_FWDeleteConnectionSecurityRule,RRPC_FWDeleteConnectionSecurityRuleResponse),
15 : (RRPC_FWDeleteAllConnectionSecurityRules,RRPC_FWDeleteAllConnectionSecurityRulesResponse),
16 : (RRPC_FWEnumConnectionSecurityRules,RRPC_FWEnumConnectionSecurityRulesResponse),
17 : (RRPC_FWAddAuthenticationSet,RRPC_FWAddAuthenticationSetResponse),
18 : (RRPC_FWSetAuthenticationSet,RRPC_FWSetAuthenticationSetResponse),
19 : (RRPC_FWDeleteAuthenticationSet,RRPC_FWDeleteAuthenticationSetResponse),
20 : (RRPC_FWDeleteAllAuthenticationSets,RRPC_FWDeleteAllAuthenticationSetsResponse),
21 : (RRPC_FWEnumAuthenticationSets,RRPC_FWEnumAuthenticationSetsResponse),
22 : (RRPC_FWAddCryptoSet,RRPC_FWAddCryptoSetResponse),
23 : (RRPC_FWSetCryptoSet,RRPC_FWSetCryptoSetResponse),
24 : (RRPC_FWDeleteCryptoSet,RRPC_FWDeleteCryptoSetResponse),
25 : (RRPC_FWDeleteAllCryptoSets,RRPC_FWDeleteAllCryptoSetsResponse),
26 : (RRPC_FWEnumCryptoSets,RRPC_FWEnumCryptoSetsResponse),
27 : (RRPC_FWEnumPhase1SAs,RRPC_FWEnumPhase1SAsResponse),
28 : (RRPC_FWEnumPhase2SAs,RRPC_FWEnumPhase2SAsResponse),
29 : (RRPC_FWDeletePhase1SAs,RRPC_FWDeletePhase1SAsResponse),
30 : (RRPC_FWDeletePhase2SAs,RRPC_FWDeletePhase2SAsResponse),
31 : (RRPC_FWEnumProducts,RRPC_FWEnumProductsResponse),
32 : (RRPC_FWAddMainModeRule,RRPC_FWAddMainModeRuleResponse),
33 : (RRPC_FWSetMainModeRule,RRPC_FWSetMainModeRuleResponse),
34 : (RRPC_FWDeleteMainModeRule,RRPC_FWDeleteMainModeRuleResponse),
35 : (RRPC_FWDeleteAllMainModeRules,RRPC_FWDeleteAllMainModeRulesResponse),
36 : (RRPC_FWEnumMainModeRules,RRPC_FWEnumMainModeRulesResponse),
37 : (RRPC_FWQueryFirewallRules,RRPC_FWQueryFirewallRulesResponse),
38 : (RRPC_FWQueryConnectionSecurityRules2_10,RRPC_FWQueryConnectionSecurityRules2_10Response),
39 : (RRPC_FWQueryMainModeRules,RRPC_FWQueryMainModeRulesResponse),
40 : (RRPC_FWQueryAuthenticationSets,RRPC_FWQueryAuthenticationSetsResponse),
41 : (RRPC_FWQueryCryptoSets,RRPC_FWQueryCryptoSetsResponse),
42 : (RRPC_FWEnumNetworks,RRPC_FWEnumNetworksResponse),
43 : (RRPC_FWEnumAdapters,RRPC_FWEnumAdaptersResponse),
44 : (RRPC_FWGetGlobalConfig2_10,RRPC_FWGetGlobalConfig2_10Response),
45 : (RRPC_FWGetConfig2_10,RRPC_FWGetConfig2_10Response),
46 : (RRPC_FWAddFirewallRule2_10,RRPC_FWAddFirewallRule2_10Response),
47 : (RRPC_FWSetFirewallRule2_10,RRPC_FWSetFirewallRule2_10Response),
48 : (RRPC_FWEnumFirewallRules2_10,RRPC_FWEnumFirewallRules2_10Response),
49 : (RRPC_FWAddConnectionSecurityRule2_10,RRPC_FWAddConnectionSecurityRule2_10Response),
50 : (RRPC_FWSetConnectionSecurityRule2_10,RRPC_FWSetConnectionSecurityRule2_10Response),
51 : (RRPC_FWEnumConnectionSecurityRules2_10,RRPC_FWEnumConnectionSecurityRules2_10Response),
52 : (RRPC_FWAddAuthenticationSet2_10,RRPC_FWAddAuthenticationSet2_10Response),
53 : (RRPC_FWSetAuthenticationSet2_10,RRPC_FWSetAuthenticationSet2_10Response),
54 : (RRPC_FWEnumAuthenticationSets2_10,RRPC_FWEnumAuthenticationSets2_10Response),
55 : (RRPC_FWAddCryptoSet2_10,RRPC_FWAddCryptoSet2_10Response),
56 : (RRPC_FWSetCryptoSet2_10,RRPC_FWSetCryptoSet2_10Response),
57 : (RRPC_FWEnumCryptoSets2_10,RRPC_FWEnumCryptoSets2_10Response),
58 : (RRPC_FWAddConnectionSecurityRule2_20,RRPC_FWAddConnectionSecurityRule2_20Response),
59 : (RRPC_FWSetConnectionSecurityRule2_20,RRPC_FWSetConnectionSecurityRule2_20Response),
60 : (RRPC_FWEnumConnectionSecurityRules2_20,RRPC_FWEnumConnectionSecurityRules2_20Response),
61 : (RRPC_FWQueryConnectionSecurityRules2_20,RRPC_FWQueryConnectionSecurityRules2_20Response),
62 : (RRPC_FWAddAuthenticationSet2_20,RRPC_FWAddAuthenticationSet2_20Response),
63 : (RRPC_FWSetAuthenticationSet2_20,RRPC_FWSetAuthenticationSet2_20Response),
64 : (RRPC_FWEnumAuthenticationSets2_20,RRPC_FWEnumAuthenticationSets2_20Response),
65 : (RRPC_FWQueryAuthenticationSets2_20,RRPC_FWQueryAuthenticationSets2_20Response),
66 : (RRPC_FWAddFirewallRule2_20,RRPC_FWAddFirewallRule2_20Response),
67 : (RRPC_FWSetFirewallRule2_20,RRPC_FWSetFirewallRule2_20Response),
68 : (RRPC_FWEnumFirewallRules2_20,RRPC_FWEnumFirewallRules2_20Response),
69 : (RRPC_FWQueryFirewallRules2_20,RRPC_FWQueryFirewallRules2_20Response),
70 : (RRPC_FWAddFirewallRule2_24,RRPC_FWAddFirewallRule2_24Response),
71 : (RRPC_FWSetFirewallRule2_24,RRPC_FWSetFirewallRule2_24Response),
72 : (RRPC_FWEnumFirewallRules2_24,RRPC_FWEnumFirewallRules2_24Response),
73 : (RRPC_FWQueryFirewallRules2_24,RRPC_FWQueryFirewallRules2_24Response),
74 : (RRPC_FWAddFirewallRule2_25,RRPC_FWAddFirewallRule2_25Response),
75 : (RRPC_FWSetFirewallRule2_25,RRPC_FWSetFirewallRule2_25Response),
76 : (RRPC_FWEnumFirewallRules2_25,RRPC_FWEnumFirewallRules2_25Response),
77 : (RRPC_FWQueryFirewallRules2_25,RRPC_FWQueryFirewallRules2_25Response),
78 : (RRPC_FWAddFirewallRule2_26,RRPC_FWAddFirewallRule2_26Response),
79 : (RRPC_FWSetFirewallRule2_26,RRPC_FWSetFirewallRule2_26Response),
80 : (RRPC_FWEnumFirewallRules2_26,RRPC_FWEnumFirewallRules2_26Response),
81 : (RRPC_FWQueryFirewallRules2_26,RRPC_FWQueryFirewallRules2_26Response),
82 : (RRPC_FWAddFirewallRule2_27,RRPC_FWAddFirewallRule2_27Response),
83 : (RRPC_FWSetFirewallRule2_27,RRPC_FWSetFirewallRule2_27Response),
84 : (RRPC_FWEnumFirewallRules2_27,RRPC_FWEnumFirewallRules2_27Response),
85 : (RRPC_FWQueryFirewallRules2_27,RRPC_FWQueryFirewallRules2_27Response),
86 : (RRPC_FWAddFirewallRule2_31,RRPC_FWAddFirewallRule2_31Response),
87 : (RRPC_FWSetFirewallRule2_31,RRPC_FWSetFirewallRule2_31Response),
88 : (RRPC_FWEnumFirewallRules2_31,RRPC_FWEnumFirewallRules2_31Response),
89 : (RRPC_FWQueryFirewallRules2_31,RRPC_FWQueryFirewallRules2_31Response),
}

