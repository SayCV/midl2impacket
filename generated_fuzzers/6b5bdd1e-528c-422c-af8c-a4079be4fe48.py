
from fuzzer.midl import *
from fuzzer.core import *
ULONGLONG = NdrHyper
BYTE = NdrByte
USHORT = NdrShort
SHORT = NdrShort
UCHAR = NdrByte
PCHAR = NdrByte
PUCHAR = NdrByte
PLONG64 = NdrHyper
ULONG = NdrLong
ULONG64 = NdrHyper
DWORD64 = NdrHyper
PDWORD64 = NdrHyper
DWORD = NdrLong
UINT64 = NdrHyper
WORD = NdrByte
PWCHAR_T = NdrByte
BOOLEAN = NdrBoolean
INT64 = NdrHyper
UNSIGNED_SHORT = NdrShort
UNSIGNED_CHAR = NdrByte
UNSIGNED_LONG = NdrLong
UNSIGNEDLONG = NdrLong
PUNSIGNED_LONG = NdrLong
PUNSIGNED_CHAR = NdrByte
UNSIGNED_INT = NdrLong
UNSIGNED___INT64 = NdrHyper
SIGNED___INT64 = NdrHyper
SIGNED_INT = NdrShort
SIGNED_LONG = NdrLong
SIGNED_CHAR = NdrByte
SIGNED_SHORT = NdrShort
WCHAR_T = NdrWString
CHAR = NdrByte
PWCHAR = NdrCString
INT = NdrLong
PVOID = NdrContextHandle
VOID = NdrContextHandle
CONTEXT_HANDLE = NdrContextHandle
PPCONTEXT_HANDLE = NdrContextHandle
LONG = NdrLong
INT3264 = NdrHyper
UNSIGNED___INT3264 = NdrHyper
UNSIGNED_HYPER = NdrHyper
HYPER = NdrHyper
DWORDLONG = NdrHyper
LONG_PTR = NdrHyper
ULONG_PTR = NdrHyper
LARGE_INTEGER = NdrHyper
LPSTR = NdrCString
LPWSTR = NdrWString
LPCSTR = NdrCString
LPCWSTR = NdrWString
LMSTR = NdrWString
PWSTR = NdrWString
WCHAR = NdrWString
PBYTE = NdrByte
DOUBLE = NdrDouble
FLOAT = NdrFloat

class FILETIME(NdrStructure):
    MEMBERS = [(DWORD,'dwLowDateTime'),(LONG,'dwHighDateTime')]

class LUID(NdrStructure):
    MEMBERS = [(DWORD,'LowPart'),(LONG,'HighPart')]

class SYSTEMTIME(NdrStructure):
    MEMBERS = [(WORD,'wYear'),(WORD,'wMonth'),(WORD,'wDayOfWeek'),(WORD,'wDay'),(WORD,'wHour'),(WORD,'wMinute'),(WORD,'wSecond'),(WORD,'wMilliseconds'),]
WCHAR_T = UNSIGNED_SHORT
ADCONNECTION_HANDLE = VOID
BOOL = INT
PPBOOL = INT
PLPBOOL = INT
BYTE = UNSIGNED_CHAR
PPBYTE = UNSIGNED_CHAR
PLPBYTE = UNSIGNED_CHAR
BOOLEAN = BYTE
PPBOOLEAN = BYTE
WCHAR = WCHAR_T
PPWCHAR = WCHAR_T
BSTR = WCHAR
CHAR = CHAR
PPCHAR = CHAR
DOUBLE = DOUBLE
DWORD = UNSIGNED_LONG
PPDWORD = UNSIGNED_LONG
PLPDWORD = UNSIGNED_LONG
DWORD32 = UNSIGNED_INT
DWORD64 = UNSIGNED___INT64
PPDWORD64 = UNSIGNED___INT64
ULONGLONG = UNSIGNED___INT64
DWORDLONG = ULONGLONG
PPDWORDLONG = ULONGLONG
ERROR_STATUS_T = UNSIGNED_LONG
FLOAT = FLOAT
UCHAR = UNSIGNED_CHAR
PPUCHAR = UNSIGNED_CHAR
SHORT = SHORT
HANDLE = VOID
HCALL = DWORD
INT = INT
PLPINT = INT
INT8 = SIGNED_CHAR
INT16 = SIGNED_SHORT
INT32 = SIGNED_INT
INT64 = SIGNED___INT64
LDAP_UDP_HANDLE = VOID
LMCSTR = WCHAR_T
LMSTR = WCHAR
LONG = LONG
PPLONG = LONG
PLPLONG = LONG
LONGLONG = SIGNED___INT64
HRESULT = LONG
LONG_PTR = INT3264
ULONG_PTR = UNSIGNED___INT3264
LONG32 = SIGNED_INT
LONG64 = SIGNED___INT64
PPLONG64 = SIGNED___INT64
LPCSTR = CHAR
LPCVOID = VOID
LPCWSTR = WCHAR_T
PSTR = CHAR
PLPSTR = CHAR
LPWSTR = WCHAR_T
PPWSTR = WCHAR_T
NET_API_STATUS = DWORD
NTSTATUS = LONG
PCONTEXT_HANDLE = VOID
PPCONTEXT_HANDLE = PCONTEXT_HANDLE
QWORD = UNSIGNED___INT64
RPC_BINDING_HANDLE = VOID
STRING = UCHAR
UINT = UNSIGNED_INT
UINT8 = UNSIGNED_CHAR
UINT16 = UNSIGNED_SHORT
UINT32 = UNSIGNED_INT
UINT64 = UNSIGNED___INT64
ULONG = UNSIGNED_LONG
PPULONG = UNSIGNED_LONG
DWORD_PTR = ULONG_PTR
SIZE_T = ULONG_PTR
ULONG32 = UNSIGNED_INT
ULONG64 = UNSIGNED___INT64
UNICODE = WCHAR_T
USHORT = UNSIGNED_SHORT
VOID = VOID
PPVOID = VOID
PLPVOID = VOID
WORD = UNSIGNED_SHORT
PPWORD = UNSIGNED_SHORT
PLPWORD = UNSIGNED_SHORT

class FILETIME(NdrStructure):
    MEMBERS = [(DWORD, "dwLowDateTime"),(DWORD, "dwHighDateTime"),]

    
PFILETIME = FILETIME
LPFILETIME = FILETIME

class GUID(NdrStructure):
    MEMBERS = [(UNSIGNED_LONG, "Data1"),(UNSIGNED_SHORT, "Data2"),(UNSIGNED_SHORT, "Data3"),(BYTE, "Data4"),]

    
UUID = GUID
PGUID = GUID

class LARGE_INTEGER(NdrStructure):
    MEMBERS = [(SIGNED___INT64, "QuadPart"),]

    
PLARGE_INTEGER = LARGE_INTEGER

class EVENT_DESCRIPTOR(NdrStructure):
    MEMBERS = [(USHORT, "Id"),(UCHAR, "Version"),(UCHAR, "Channel"),(UCHAR, "Level"),(UCHAR, "Opcode"),(USHORT, "Task"),(ULONGLONG, "Keyword"),]

    
PEVENT_DESCRIPTOR = EVENT_DESCRIPTOR
PCEVENT_DESCRIPTOR = EVENT_DESCRIPTOR

class S0(NdrStructure):
    MEMBERS = [(ULONG, "KernelTime"),(ULONG, "UserTime"),]

    

class U0(NdrUnion):
    SWITCHTYPE = DWORD
    MEMBERS = {1 : (S0, "s0"),2 : (ULONG64, "ProcessorTime"),}

    

class EVENT_HEADER(NdrStructure):
    MEMBERS = [(USHORT, "Size"),(USHORT, "HeaderType"),(USHORT, "Flags"),(USHORT, "EventProperty"),(ULONG, "ThreadId"),(ULONG, "ProcessId"),(LARGE_INTEGER, "TimeStamp"),(GUID, "ProviderId"),(EVENT_DESCRIPTOR, "EventDescriptor"),(U0, "u0"),(GUID, "ActivityId"),]

    
PEVENT_HEADER = EVENT_HEADER
LCID = DWORD

class LUID(NdrStructure):
    MEMBERS = [(DWORD, "LowPart"),(LONG, "HighPart"),]

    
PLUID = LUID

class MULTI_SZ(NdrStructure):
    MEMBERS = [(PWCHAR_T, "Value"),(DWORD, "nChar"),]

    

class RPC_UNICODE_STRING(NdrStructure):
    MEMBERS = [(UNSIGNED_SHORT, "Length"),(UNSIGNED_SHORT, "MaximumLength"),(PWCHAR, "Buffer"),]

    
PRPC_UNICODE_STRING = RPC_UNICODE_STRING

class SERVER_INFO_100(NdrStructure):
    MEMBERS = [(DWORD, "sv100_platform_id"),(PWCHAR_T, "sv100_name"),]

    
PSERVER_INFO_100 = SERVER_INFO_100
LPSERVER_INFO_100 = SERVER_INFO_100

class SERVER_INFO_101(NdrStructure):
    MEMBERS = [(DWORD, "sv101_platform_id"),(PWCHAR_T, "sv101_name"),(DWORD, "sv101_version_major"),(DWORD, "sv101_version_minor"),(DWORD, "sv101_version_type"),(PWCHAR_T, "sv101_comment"),]

    
PSERVER_INFO_101 = SERVER_INFO_101
LPSERVER_INFO_101 = SERVER_INFO_101

class SYSTEMTIME(NdrStructure):
    MEMBERS = [(WORD, "wYear"),(WORD, "wMonth"),(WORD, "wDayOfWeek"),(WORD, "wDay"),(WORD, "wHour"),(WORD, "wMinute"),(WORD, "wSecond"),(WORD, "wMilliseconds"),]

    
PSYSTEMTIME = SYSTEMTIME

class UINT128(NdrStructure):
    MEMBERS = [(UINT64, "lower"),(UINT64, "upper"),]

    
PUINT128 = UINT128

class ULARGE_INTEGER(NdrStructure):
    MEMBERS = [(UNSIGNED___INT64, "QuadPart"),]

    
PULARGE_INTEGER = ULARGE_INTEGER

class RPC_SID_IDENTIFIER_AUTHORITY(NdrStructure):
    MEMBERS = [(BYTE, "Value"),]

    
ACCESS_MASK = DWORD
PACCESS_MASK = ACCESS_MASK

class OBJECT_TYPE_LIST(NdrStructure):
    MEMBERS = [(WORD, "Level"),(ACCESS_MASK, "Remaining"),(PGUID, "ObjectType"),]

    
POBJECT_TYPE_LIST = OBJECT_TYPE_LIST

class ACE_HEADER(NdrStructure):
    MEMBERS = [(UCHAR, "AceType"),(UCHAR, "AceFlags"),(USHORT, "AceSize"),]

    
PACE_HEADER = ACE_HEADER

class SYSTEM_MANDATORY_LABEL_ACE(NdrStructure):
    MEMBERS = [(ACE_HEADER, "Header"),(ACCESS_MASK, "Mask"),(DWORD, "SidStart"),]

    
PSYSTEM_MANDATORY_LABEL_ACE = SYSTEM_MANDATORY_LABEL_ACE

class TOKEN_MANDATORY_POLICY(NdrStructure):
    MEMBERS = [(DWORD, "Policy"),]

    
PTOKEN_MANDATORY_POLICY = TOKEN_MANDATORY_POLICY

class MANDATORY_INFORMATION(NdrStructure):
    MEMBERS = [(ACCESS_MASK, "AllowedAccess"),(BOOLEAN, "WriteAllowed"),(BOOLEAN, "ReadAllowed"),(BOOLEAN, "ExecuteAllowed"),(TOKEN_MANDATORY_POLICY, "MandatoryPolicy"),]

    
PMANDATORY_INFORMATION = MANDATORY_INFORMATION

class CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE(NdrStructure):
    MEMBERS = [(DWORD, "Length"),(BYTE, "OctetString"),]

    
PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE = CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE

class VALUES(NdrUnion):
    SWITCHTYPE = DWORD
    MEMBERS = {1 : (PLONG64, "pInt64"),2 : (PDWORD64, "pUint64"),3 : (PWSTR, "ppString"),4 : (PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE, "pOctetString"),}

    

class CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1(NdrStructure):
    MEMBERS = [(DWORD, "Name"),(WORD, "ValueType"),(WORD, "Reserved"),(DWORD, "Flags"),(DWORD, "ValueCount"),(VALUES, "Values"),]

    
PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
SECURITY_INFORMATION = DWORD
PPSECURITY_INFORMATION = DWORD

class RPC_SID(NdrStructure):
    MEMBERS = [(UNSIGNED_CHAR, "Revision"),(UNSIGNED_CHAR, "SubAuthorityCount"),(RPC_SID_IDENTIFIER_AUTHORITY, "IdentifierAuthority"),(UNSIGNED_LONG, "SubAuthority"),]

    
PRPC_SID = RPC_SID
PSID = RPC_SID

class ACL(NdrStructure):
    MEMBERS = [(UNSIGNED_CHAR, "AclRevision"),(UNSIGNED_CHAR, "Sbz1"),(UNSIGNED_SHORT, "AclSize"),(UNSIGNED_SHORT, "AceCount"),(UNSIGNED_SHORT, "Sbz2"),]

    
PACL = ACL

class SECURITY_DESCRIPTOR(NdrStructure):
    MEMBERS = [(UCHAR, "Revision"),(UCHAR, "Sbz1"),(USHORT, "Control"),(PSID, "Owner"),(PSID, "Group"),(PACL, "Sacl"),(PACL, "Dacl"),]

    
PSECURITY_DESCRIPTOR = SECURITY_DESCRIPTOR

class FW_STORE_TYPE(NdrEnum):
    MAP = ((0 , 'FW_STORE_TYPE_INVALID'),(1 , 'FW_STORE_TYPE_GP_RSOP'),(2 , 'FW_STORE_TYPE_LOCAL'),(3 , 'FW_STORE_TYPE_NOT_USED_VALUE_3'),(4 , 'FW_STORE_TYPE_NOT_USED_VALUE_4'),(5 , 'FW_STORE_TYPE_DYNAMIC'),(6 , 'FW_STORE_TYPE_GPO'),(7 , 'FW_STORE_TYPE_DEFAULTS'),(8 , 'FW_STORE_TYPE_NOT_USED_VALUE_8'),(9 , 'FW_STORE_TYPE_NOT_USED_VALUE_9'),(10 , 'FW_STORE_TYPE_NOT_USED_VALUE_10'),(11 , 'FW_STORE_TYPE_NOT_USED_VALUE_11'),(12 , 'FW_STORE_TYPE_MAX'),)        

class FW_TRANSACTIONAL_STATE(NdrEnum):
    MAP = ((0 , 'FW_TRANSACTIONAL_STATE_NONE'),(1 , 'FW_TRANSACTIONAL_STATE_NO_FLUSH'),(2 , 'FW_TRANSACTIONAL_STATE_MAX'),)        

class FW_PROFILE_TYPE(NdrEnum):
    MAP = ((0 , 'FW_PROFILE_TYPE_INVALID'),(1 , 'FW_PROFILE_TYPE_DOMAIN'),(2 , 'FW_PROFILE_TYPE_STANDARD'),(FW_PROFILE_TYPE_STANDARD , 'FW_PROFILE_TYPE_PRIVATE'),(4 , 'FW_PROFILE_TYPE_PUBLIC'),(2147483647 , 'FW_PROFILE_TYPE_ALL'),(2147483648 , 'FW_PROFILE_TYPE_CURRENT'),(1 , 'FW_PROFILE_TYPE_NONE'),)        

class FW_POLICY_ACCESS_RIGHT(NdrEnum):
    MAP = ((0 , 'FW_POLICY_ACCESS_RIGHT_INVALID'),(1 , 'FW_POLICY_ACCESS_RIGHT_READ'),(2 , 'FW_POLICY_ACCESS_RIGHT_READ_WRITE'),(3 , 'FW_POLICY_ACCESS_RIGHT_MAX'),)        

class FW_POLICY_STORE_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_POLICY_STORE_FLAGS_NONE'),(1 , 'FW_POLICY_STORE_FLAGS_DELETE_DYNAMIC_RULES_AFTER_CLOSE'),(2 , 'FW_POLICY_STORE_FLAGS_OPEN_GP_CACHE'),(4 , 'FW_POLICY_STORE_FLAGS_USE_GP_CACHE'),(8 , 'FW_POLICY_STORE_FLAGS_SAVE_GP_CACHE'),(16 , 'FW_POLICY_STORE_FLAGS_NOT_USED_VALUE_16'),(32 , 'FW_POLICY_STORE_FLAGS_MAX'),)        

class FW_IPV4_SUBNET(NdrStructure):
    MEMBERS = [(DWORD, "dwAddress"),(DWORD, "dwSubNetMask"),]

    
PFW_IPV4_SUBNET = FW_IPV4_SUBNET

class FW_IPV4_SUBNET_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_IPV4_SUBNET, "pSubNets"),]

    
PFW_IPV4_SUBNET_LIST = FW_IPV4_SUBNET_LIST

class FW_IPV6_SUBNET(NdrStructure):
    MEMBERS = [(BYTE, "Address"),(DWORD, "dwNumPrefixBits"),]

    
PFW_IPV6_SUBNET = FW_IPV6_SUBNET

class FW_IPV6_SUBNET_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_IPV6_SUBNET, "pSubNets"),]

    
PFW_IPV6_SUBNET_LIST = FW_IPV6_SUBNET_LIST

class FW_IPV4_ADDRESS_RANGE(NdrStructure):
    MEMBERS = [(DWORD, "dwBegin"),(DWORD, "dwEnd"),]

    
PFW_IPV4_ADDRESS_RANGE = FW_IPV4_ADDRESS_RANGE

class FW_IPV6_ADDRESS_RANGE(NdrStructure):
    MEMBERS = [(BYTE, "Begin"),(BYTE, "End"),]

    
PFW_IPV6_ADDRESS_RANGE = FW_IPV6_ADDRESS_RANGE

class FW_IPV4_RANGE_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_IPV4_ADDRESS_RANGE, "pRanges"),]

    
PFW_IPV4_RANGE_LIST = FW_IPV4_RANGE_LIST

class FW_IPV6_RANGE_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_IPV6_ADDRESS_RANGE, "pRanges"),]

    
PFW_IPV6_RANGE_LIST = FW_IPV6_RANGE_LIST

class FW_PORT_RANGE(NdrStructure):
    MEMBERS = [(WORD, "wBegin"),(WORD, "wEnd"),]

    
PFW_PORT_RANGE = FW_PORT_RANGE

class FW_PORT_RANGE_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_PORT_RANGE, "pPorts"),]

    
PFW_PORT_RANGE_LIST = FW_PORT_RANGE_LIST

class FW_PORT_KEYWORD(NdrEnum):
    MAP = ((0 , 'FW_PORT_KEYWORD_NONE'),(1 , 'FW_PORT_KEYWORD_DYNAMIC_RPC_PORTS'),(2 , 'FW_PORT_KEYWORD_RPC_EP'),(4 , 'FW_PORT_KEYWORD_TEREDO_PORT'),(8 , 'FW_PORT_KEYWORD_IP_TLS_IN'),(16 , 'FW_PORT_KEYWORD_IP_TLS_OUT'),(32 , 'FW_PORT_KEYWORD_DHCP'),(64 , 'FW_PORT_KEYWORD_PLAYTO_DISCOVERY'),(128 , 'FW_PORT_KEYWORD_MDNS'),(256 , 'FW_PORT_KEYWORD_CORTANA_OUT'),(512 , 'FW_PORT_KEYWORD_PROXIMAL_TCP_CDP'),(1024 , 'FW_PORT_KEYWORD_MAX'),(8 , 'FW_PORT_KEYWORD_MAX_V2_1'),(32 , 'FW_PORT_KEYWORD_MAX_V2_10'),(128 , 'FW_PORT_KEYWORD_MAX_V2_20'),(256 , 'FW_PORT_KEYWORD_MAX_V2_24'),(512 , 'FW_PORT_KEYWORD_MAX_V2_25'),)        

class FW_PORTS(NdrStructure):
    MEMBERS = [(WORD, "wPortKeywords"),(FW_PORT_RANGE_LIST, "Ports"),]

    
PFW_PORTS = FW_PORTS

class FW_ICMP_TYPE_CODE(NdrStructure):
    MEMBERS = [(BYTE, "bType"),(WORD, "wCode"),]

    
PFW_ICMP_TYPE_CODE = FW_ICMP_TYPE_CODE

class FW_ICMP_TYPE_CODE_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_ICMP_TYPE_CODE, "pEntries"),]

    
PFW_ICMP_TYPE_CODE_LIST = FW_ICMP_TYPE_CODE_LIST

class FW_INTERFACE_LUIDS(NdrStructure):
    MEMBERS = [(DWORD, "dwNumLUIDs"),(PGUID, "pLUIDs"),]

    
PFW_INTERFACE_LUIDS = FW_INTERFACE_LUIDS

class FW_DIRECTION(NdrEnum):
    MAP = ((0 , 'FW_DIR_INVALID'),(1 , 'FW_DIR_IN'),(2 , 'FW_DIR_OUT'),(3 , 'FW_DIR_MAX'),)        

class FW_INTERFACE_TYPE(NdrEnum):
    MAP = ((0 , 'FW_INTERFACE_TYPE_ALL'),(1 , 'FW_INTERFACE_TYPE_LAN'),(2 , 'FW_INTERFACE_TYPE_WIRELESS'),(4 , 'FW_INTERFACE_TYPE_REMOTE_ACCESS'),(8 , 'FW_INTERFACE_TYPE_MOBILE_BBAND'),(16 , 'FW_INTERFACE_TYPE_MAX'),(8 , 'FW_INTERFACE_TYPE_MAX_V2_23'),)        

class FW_ADDRESS_KEYWORD(NdrEnum):
    MAP = ((0 , 'FW_ADDRESS_KEYWORD_NONE'),(1 , 'FW_ADDRESS_KEYWORD_LOCAL_SUBNET'),(2 , 'FW_ADDRESS_KEYWORD_DNS'),(4 , 'FW_ADDRESS_KEYWORD_DHCP'),(8 , 'FW_ADDRESS_KEYWORD_WINS'),(16 , 'FW_ADDRESS_KEYWORD_DEFAULT_GATEWAY'),(32 , 'FW_ADDRESS_KEYWORD_INTRANET'),(64 , 'FW_ADDRESS_KEYWORD_INTERNET'),(128 , 'FW_ADDRESS_KEYWORD_PLAYTO_RENDERERS'),(256 , 'FW_ADDRESS_KEYWORD_REMOTE_INTRANET'),(512 , 'FW_ADDRESS_KEYWORD_CAPTIVE_PORTAL'),(1024 , 'FW_ADDRESS_KEYWORD_MAX'),(32 , 'FW_ADDRESS_KEYWORD_MAX_V2_10'),(512 , 'FW_ADDRESS_KEYWORD_MAX_V2_29'),)        

class FW_ADDRESSES(NdrStructure):
    MEMBERS = [(DWORD, "dwV4AddressKeywords"),(DWORD, "dwV6AddressKeywords"),(FW_IPV4_SUBNET_LIST, "V4SubNets"),(FW_IPV4_RANGE_LIST, "V4Ranges"),(FW_IPV6_SUBNET_LIST, "V6SubNets"),(FW_IPV6_RANGE_LIST, "V6Ranges"),]

    
PFW_ADDRESSES = FW_ADDRESSES

class FW_TRUST_TUPLE_KEYWORD(NdrEnum):
    MAP = ((0 , 'FW_TRUST_TUPLE_KEYWORD_NONE'),(1 , 'FW_TRUST_TUPLE_KEYWORD_PROXIMITY'),(2 , 'FW_TRUST_TUPLE_KEYWORD_PROXIMITY_SHARING'),(4 , 'FW_TRUST_TUPLE_KEYWORD_WFD_PRINT'),(8 , 'FW_TRUST_TUPLE_KEYWORD_WFD_DISPLAY'),(16 , 'FW_TRUST_TUPLE_KEYWORD_WFD_DEVICES'),(32 , 'FW_TRUST_TUPLE_KEYWORD_WFD_KM_DRIVER'),(64 , 'FW_TRUST_TUPLE_KEYWORD_UPNP'),(128 , 'FW_TRUST_TUPLE_KEYWORD_WFD_CDP'),(256 , 'FW_TRUST_TUPLE_KEYWORD_MAX'),(4 , 'FW_TRUST_TUPLE_KEYWORD_MAX_V2_20'),(32 , 'FW_TRUST_TUPLE_KEYWORD_MAX_V2_26'),(128 , 'FW_TRUST_TUPLE_KEYWORD_MAX_V2_27'),)        

class FW_RULE_STATUS(NdrEnum):
    MAP = ((65536 , 'FW_RULE_STATUS_OK'),(131072 , 'FW_RULE_STATUS_PARTIALLY_IGNORED'),(262144 , 'FW_RULE_STATUS_IGNORED'),(524288 , 'FW_RULE_STATUS_PARSING_ERROR'),(524289 , 'FW_RULE_STATUS_PARSING_ERROR_NAME'),(524290 , 'FW_RULE_STATUS_PARSING_ERROR_DESC'),(524291 , 'FW_RULE_STATUS_PARSING_ERROR_APP'),(524292 , 'FW_RULE_STATUS_PARSING_ERROR_SVC'),(524293 , 'FW_RULE_STATUS_PARSING_ERROR_RMA'),(524294 , 'FW_RULE_STATUS_PARSING_ERROR_RUA'),(524295 , 'FW_RULE_STATUS_PARSING_ERROR_EMBD'),(524296 , 'FW_RULE_STATUS_PARSING_ERROR_RULE_ID'),(524297 , 'FW_RULE_STATUS_PARSING_ERROR_PHASE1_AUTH'),(524298 , 'FW_RULE_STATUS_PARSING_ERROR_PHASE2_CRYPTO'),(524299 , 'FW_RULE_STATUS_PARSING_ERROR_PHASE2_AUTH'),(524300 , 'FW_RULE_STATUS_PARSING_ERROR_RESOLVE_APP'),(524301 , 'FW_RULE_STATUS_PARSING_ERROR_MAINMODE_ID'),(524302 , 'FW_RULE_STATUS_PARSING_ERROR_PHASE1_CRYPTO'),(524303 , 'FW_RULE_STATUS_PARSING_ERROR_REMOTE_ENDPOINTS'),(524304 , 'FW_RULE_STATUS_PARSING_ERROR_REMOTE_ENDPOINT_FQDN'),(524305 , 'FW_RULE_STATUS_PARSING_ERROR_KEY_MODULE'),(524306 , 'FW_RULE_STATUS_PARSING_ERROR_LUA'),(524307 , 'FW_RULE_STATUS_PARSING_ERROR_FWD_LIFETIME'),(524308 , 'FW_RULE_STATUS_PARSING_ERROR_TRANSPORT_MACHINE_AUTHZ_SDDL'),(524309 , 'FW_RULE_STATUS_PARSING_ERROR_TRANSPORT_USER_AUTHZ_SDDL'),(524310 , 'FW_RULE_STATUS_PARSING_ERROR_NETNAMES_STRING'),(524311 , 'FW_RULE_STATUS_PARSING_ERROR_SECURITY_REALM_ID_STRING'),(524312 , 'FW_RULE_STATUS_PARSING_ERROR_FQBN_STRING'),(1048576 , 'FW_RULE_STATUS_SEMANTIC_ERROR'),(1048592 , 'FW_RULE_STATUS_SEMANTIC_ERROR_RULE_ID'),(1048608 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PORTS'),(1048609 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PORT_KEYW'),(1048610 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PORT_RANGE'),(1048611 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PORTRANGE_RESTRICTION'),(1048640 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V4_SUBNETS'),(1048641 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V6_SUBNETS'),(1048642 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V4_RANGES'),(1048643 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V6_RANGES'),(1048644 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_RANGE'),(1048645 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_MASK'),(1048646 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_PREFIX'),(1048647 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_KEYW'),(1048648 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LADDR_PROP'),(1048649 , 'FW_RULE_STATUS_SEMANTIC_ERROR_RADDR_PROP'),(1048650 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V6'),(1048651 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LADDR_INTF'),(1048652 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_V4'),(1048653 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TUNNEL_ENDPOINT_ADDR'),(1048654 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DTE_VER'),(1048655 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DTE_MISMATCH_ADDR'),(1048656 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PROFILE'),(1048672 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ICMP'),(1048673 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ICMP_CODE'),(1048688 , 'FW_RULE_STATUS_SEMANTIC_ERROR_IF_ID'),(1048689 , 'FW_RULE_STATUS_SEMANTIC_ERROR_IF_TYPE'),(1048704 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ACTION'),(1048705 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ALLOW_BYPASS'),(1048706 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DO_NOT_SECURE'),(1048707 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ACTION_BLOCK_IS_ENCRYPTED_SECURE'),(1048708 , 'FW_RULE_STATUS_SEMANTIC_ERROR_INCOMPATIBLE_FLAG_OR_ACTION_WITH_SECURITY_REALM'),(1048720 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DIR'),(1048736 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PROT'),(1048737 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PROT_PROP'),(1048738 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DEFER_EDGE_PROP'),(1048739 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ALLOW_BYPASS_OUTBOUND'),(1048740 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DEFER_USER_INVALID_RULE'),(1048752 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS'),(1048753 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTO_AUTH'),(1048754 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTO_BLOCK'),(1048755 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTO_DYN_RPC'),(1048756 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTHENTICATE_ENCRYPT'),(1048757 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTH_WITH_ENC_NEGOTIATE_VER'),(1048758 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTH_WITH_ENC_NEGOTIATE'),(1048759 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ESP_NO_ENCAP_VER'),(1048760 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ESP_NO_ENCAP'),(1048761 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_TUNNEL_AUTH_MODES_VER'),(1048762 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_TUNNEL_AUTH_MODES'),(1048763 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_IP_HTTPS_VER'),(1048763 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_IP_TLS_VER'),(1048764 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PORTRANGE_VER'),(1048765 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ADDRS_TRAVERSE_DEFER_VER'),(1048766 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTH_WITH_ENC_NEGOTIATE_OUTBOUND'),(1048767 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_AUTHENTICATE_WITH_OUTBOUND_BYPASS_VER'),(1048768 , 'FW_RULE_STATUS_SEMANTIC_ERROR_REMOTE_AUTH_LIST'),(1048769 , 'FW_RULE_STATUS_SEMANTIC_ERROR_REMOTE_USER_LIST'),(1048770 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LOCAL_USER_LIST'),(1048771 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LUA_VER'),(1048772 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LOCAL_USER_OWNER'),(1048773 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LOCAL_USER_OWNER_VER'),(1048774 , 'FW_RULE_STATUS_SEMANTIC_ERROR_LUA_CONDITIONAL_VER'),(1048775 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_SYSTEMOS_GAMEOS'),(1048776 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_CORTANA_VER'),(1048777 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_REMOTENAME'),(1048784 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_ALLOW_PROFILE_CROSSING_VER'),(1048785 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_LOCAL_ONLY_MAPPED_VER'),(1048800 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PLATFORM'),(1048801 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PLATFORM_OP_VER'),(1048802 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PLATFORM_OP'),(1048816 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DTE_NOANY_ADDR'),(1048817 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TUNNEL_EXEMPT_WITH_GATEWAY'),(1048818 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TUNNEL_EXEMPT_VER'),(1048819 , 'FW_RULE_STATUS_SEMANTIC_ERROR_ADDR_KEYWORD_VER'),(1048820 , 'FW_RULE_STATUS_SEMANTIC_ERROR_KEY_MODULE_VER'),(1048832 , 'FW_RULE_STATUS_SEMANTIC_ERROR_APP_CONTAINER_PACKAGE_ID'),(1048833 , 'FW_RULE_STATUS_SEMANTIC_ERROR_APP_CONTAINER_PACKAGE_ID_VER'),(1049088 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRUST_TUPLE_KEYWORD_INCOMPATIBLE'),(1049089 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRUST_TUPLE_KEYWORD_INVALID'),(1049090 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRUST_TUPLE_KEYWORD_VER'),(1049345 , 'FW_RULE_STATUS_SEMANTIC_ERROR_INTERFACE_TYPES_VER'),(1049601 , 'FW_RULE_STATUS_SEMANTIC_ERROR_NETNAMES_VER'),(1049602 , 'FW_RULE_STATUS_SEMANTIC_ERROR_SECURITY_REALM_ID_VER'),(1049603 , 'FW_RULE_STATUS_SEMANTIC_ERROR_SYSTEMOS_GAMEOS_VER'),(1049604 , 'FW_RULE_STATUS_SEMANTIC_ERROR_DEVMODE_VER'),(1049605 , 'FW_RULE_STATUS_SEMANTIC_ERROR_REMOTE_SERVERNAME_VER'),(1049606 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FQBN_VER'),(1049607 , 'FW_RULE_STATUS_SEMANTIC_ERROR_COMPARTMENT_ID_VER'),(1049608 , 'FW_RULE_STATUS_SEMANTIC_ERROR_CALLOUT_AND_AUDIT_VER'),(1049856 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_AUTH_SET_ID'),(1049872 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_SET_ID'),(1049873 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_SET_ID'),(1049874 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_KEY_MANAGER_DICTATE_VER'),(1049875 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_KEY_MANAGER_NOTIFY_VER'),(1049876 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_MACHINE_AUTHZ_VER'),(1049877 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_USER_AUTHZ_VER'),(1049878 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_MACHINE_AUTHZ_ON_TUNNEL'),(1049879 , 'FW_RULE_STATUS_SEMANTIC_ERROR_TRANSPORT_USER_AUTHZ_ON_TUNNEL'),(1049880 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PER_RULE_AND_GLOBAL_AUTHZ'),(1049881 , 'FW_RULE_STATUS_SEMANTIC_ERROR_FLAGS_SECURITY_REALM'),(1052672 , 'FW_RULE_STATUS_SEMANTIC_ERROR_SET_ID'),(1052688 , 'FW_RULE_STATUS_SEMANTIC_ERROR_IPSEC_PHASE'),(1052704 , 'FW_RULE_STATUS_SEMANTIC_ERROR_EMPTY_SUITES'),(1052720 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_AUTH_METHOD'),(1052721 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_AUTH_METHOD'),(1052722 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_METHOD_ANONYMOUS'),(1052723 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_METHOD_DUPLICATE'),(1052724 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_METHOD_VER'),(1052736 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_SUITE_FLAGS'),(1052737 , 'FW_RULE_STATUS_SEMANTIC_ERROR_HEALTH_CERT'),(1052738 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_SIGNCERT_VER'),(1052739 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_INTERMEDIATE_CA_VER'),(1052752 , 'FW_RULE_STATUS_SEMANTIC_ERROR_MACHINE_SHKEY'),(1052768 , 'FW_RULE_STATUS_SEMANTIC_ERROR_CA_NAME'),(1052769 , 'FW_RULE_STATUS_SEMANTIC_ERROR_MIXED_CERTS'),(1052770 , 'FW_RULE_STATUS_SEMANTIC_ERROR_NON_CONTIGUOUS_CERTS'),(1052771 , 'FW_RULE_STATUS_SEMANTIC_ERROR_MIXED_CA_TYPE_IN_BLOCK'),(1052784 , 'FW_RULE_STATUS_SEMANTIC_ERROR_MACHINE_USER_AUTH'),(1052785 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_VER'),(1052786 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_VER_MISMATCH'),(1052787 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_RENEWAL_HASH'),(1052788 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_HASH'),(1052789 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_EKU'),(1052790 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_NAME_TYPE'),(1052791 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_NAME'),(1052792 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_INVALID_CRITERIA_TYPE'),(1052793 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_CERT_CRITERIA_MISSING_CRITERIA'),(1052800 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PROXY_SERVER'),(1052801 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_PROXY_SERVER_VER'),(1069056 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_NON_DEFAULT_ID'),(1069057 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_FLAGS'),(1069058 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_TIMEOUT_MINUTES'),(1069059 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_TIMEOUT_SESSIONS'),(1069060 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_KEY_EXCHANGE'),(1069061 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_ENCRYPTION'),(1069062 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_HASH'),(1069063 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_ENCRYPTION_VER'),(1069064 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_HASH_VER'),(1069065 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE1_CRYPTO_KEY_EXCH_VER'),(1069088 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_PFS'),(1069089 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_PROTOCOL'),(1069090 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_ENCRYPTION'),(1069091 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_HASH'),(1069092 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_TIMEOUT_MINUTES'),(1069093 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_TIMEOUT_KBYTES'),(1069094 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_ENCRYPTION_VER'),(1069095 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_HASH_VER'),(1069096 , 'FW_RULE_STATUS_SEMANTIC_ERROR_PHASE2_CRYPTO_PFS_VER'),(1069120 , 'FW_RULE_STATUS_SEMANTIC_ERROR_CRYPTO_ENCR_HASH'),(1069121 , 'FW_RULE_STATUS_SEMANTIC_ERROR_CRYPTO_ENCR_HASH_COMPAT'),(1069136 , 'FW_RULE_STATUS_SEMANTIC_ERROR_SCHEMA_VERSION'),(1073152 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_OR_AND_CONDITIONS'),(1073153 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_AND_CONDITIONS'),(1073154 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_KEY'),(1073155 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_MATCH_TYPE'),(1073156 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_DATA_TYPE'),(1073157 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_CONDITION_KEY_AND_DATA_TYPE'),(1073158 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEYS_PROTOCOL_PORT'),(1073159 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_PROFILE'),(1073160 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_STATUS'),(1073161 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_FILTERID'),(1073168 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_APP_PATH'),(1073169 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_PROTOCOL'),(1073170 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_LOCAL_PORT'),(1073171 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_REMOTE_PORT'),(1073173 , 'FW_RULE_STATUS_SEMANTIC_ERROR_QUERY_KEY_SVC_NAME'),(1077248 , 'FW_RULE_STATUS_SEMANTIC_ERROR_REQUIRE_IN_CLEAR_OUT_ON_TRANSPORT'),(1077249 , 'FW_RULE_STATUS_SEMANTIC_ERROR_BYPASS_TUNNEL_IF_SECURE_ON_TRANSPORT'),(1077250 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_NOENCAP_ON_TUNNEL'),(1077251 , 'FW_RULE_STATUS_SEMANTIC_ERROR_AUTH_NOENCAP_ON_PSK'),(2097152 , 'FW_RULE_STATUS_RUNTIME_ERROR'),(2097153 , 'FW_RULE_STATUS_RUNTIME_ERROR_PHASE1_AUTH_NOT_FOUND'),(2097154 , 'FW_RULE_STATUS_RUNTIME_ERROR_PHASE2_AUTH_NOT_FOUND'),(2097155 , 'FW_RULE_STATUS_RUNTIME_ERROR_PHASE2_CRYPTO_NOT_FOUND'),(2097156 , 'FW_RULE_STATUS_RUNTIME_ERROR_AUTH_MCHN_SHKEY_MISMATCH'),(2097157 , 'FW_RULE_STATUS_RUNTIME_ERROR_PHASE1_CRYPTO_NOT_FOUND'),(2097158 , 'FW_RULE_STATUS_RUNTIME_ERROR_AUTH_NOENCAP_ON_TUNNEL'),(2097159 , 'FW_RULE_STATUS_RUNTIME_ERROR_AUTH_NOENCAP_ON_PSK'),(2097160 , 'FW_RULE_STATUS_RUNTIME_ERROR_KEY_MODULE_AUTH_MISMATCH'),(FW_RULE_STATUS_RUNTIME_ERROR , 'FW_RULE_STATUS_ERROR'),(4294901760 , 'FW_RULE_STATUS_ALL'),)        

class FW_RULE_STATUS_CLASS(NdrEnum):
    MAP = ((FW_RULE_STATUS_OK , 'FW_RULE_STATUS_CLASS_OK'),(FW_RULE_STATUS_PARTIALLY_IGNORED , 'FW_RULE_STATUS_CLASS_PARTIALLY_IGNORED'),(FW_RULE_STATUS_IGNORED , 'FW_RULE_STATUS_CLASS_IGNORED'),(FW_RULE_STATUS_PARSING_ERROR , 'FW_RULE_STATUS_CLASS_PARSING_ERROR'),(FW_RULE_STATUS_SEMANTIC_ERROR , 'FW_RULE_STATUS_CLASS_SEMANTIC_ERROR'),(FW_RULE_STATUS_RUNTIME_ERROR , 'FW_RULE_STATUS_CLASS_RUNTIME_ERROR'),(FW_RULE_STATUS_ERROR , 'FW_RULE_STATUS_CLASS_ERROR'),(FW_RULE_STATUS_ALL , 'FW_RULE_STATUS_CLASS_ALL'),)        

class FW_OBJECT_CTRL_FLAG(NdrEnum):
    MAP = ((1 , 'FW_OBJECT_CTRL_FLAG_INCLUDE_METADATA'),)        

class FW_ENFORCEMENT_STATE(NdrEnum):
    MAP = ((0 , 'FW_ENFORCEMENT_STATE_INVALID'),(1 , 'FW_ENFORCEMENT_STATE_FULL'),(2 , 'FW_ENFORCEMENT_STATE_WF_OFF_IN_PROFILE'),(3 , 'FW_ENFORCEMENT_STATE_CATEGORY_OFF'),(4 , 'FW_ENFORCEMENT_STATE_DISABLED_OBJECT'),(5 , 'FW_ENFORCEMENT_STATE_INACTIVE_PROFILE'),(6 , 'FW_ENFORCEMENT_STATE_LOCAL_ADDRESS_RESOLUTION_EMPTY'),(7 , 'FW_ENFORCEMENT_STATE_REMOTE_ADDRESS_RESOLUTION_EMPTY'),(8 , 'FW_ENFORCEMENT_STATE_LOCAL_PORT_RESOLUTION_EMPTY'),(9 , 'FW_ENFORCEMENT_STATE_REMOTE_PORT_RESOLUTION_EMPTY'),(10 , 'FW_ENFORCEMENT_STATE_INTERFACE_RESOLUTION_EMPTY'),(11 , 'FW_ENFORCEMENT_STATE_APPLICATION_RESOLUTION_EMPTY'),(12 , 'FW_ENFORCEMENT_STATE_REMOTE_MACHINE_EMPTY'),(13 , 'FW_ENFORCEMENT_STATE_REMOTE_USER_EMPTY'),(14 , 'FW_ENFORCEMENT_STATE_LOCAL_GLOBAL_OPEN_PORTS_DISALLOWED'),(15 , 'FW_ENFORCEMENT_STATE_LOCAL_AUTHORIZED_APPLICATIONS_DISALLOWED'),(16 , 'FW_ENFORCEMENT_STATE_LOCAL_FIREWALL_RULES_DISALLOWED'),(17 , 'FW_ENFORCEMENT_STATE_LOCAL_CONSEC_RULES_DISALLOWED'),(18 , 'FW_ENFORCEMENT_STATE_MISMATCHED_PLATFORM'),(19 , 'FW_ENFORCEMENT_STATE_OPTIMIZED_OUT'),(20 , 'FW_ENFORCEMENT_STATE_LOCAL_USER_EMPTY'),(21 , 'FW_ENFORCEMENT_STATE_TRANSPORT_MACHINE_SD_EMPTY'),(22 , 'FW_ENFORCEMENT_STATE_TRANSPORT_USER_SD_EMPTY'),(23 , 'FW_ENFORCEMENT_STATE_TUPLE_RESOLUTION_EMPTY'),(24 , 'FW_ENFORCEMENT_STATE_NETNAME_RESOLUTION_EMPTY'),(25 , 'FW_ENFORCEMENT_STATE_MAX'),)        

class FW_OBJECT_METADATA(NdrStructure):
    MEMBERS = [(UINT64, "qwFilterContextID"),(DWORD, "dwNumEntries"),(PFW_ENFORCEMENT_STATE, "pEnforcementStates"),]

    
PFW_OBJECT_METADATA = FW_OBJECT_METADATA

class FW_OS_PLATFORM_OP(NdrEnum):
    MAP = ((0 , 'FW_OS_PLATFORM_OP_EQ'),(1 , 'FW_OS_PLATFORM_OP_GTEQ'),(2 , 'FW_OS_PLATFORM_OP_MAX'),(5 , 'FW_OS_PLATFORM_OP_FIELD_SIZE'),(248 , 'FW_OS_PLATFORM_OP_FIELD_MASK'),)        

class FW_OS_PLATFORM(NdrStructure):
    MEMBERS = [(BYTE, "bPlatform"),(BYTE, "bMajorVersion"),(BYTE, "bMinorVersion"),(BYTE, "Reserved"),]

    
PFW_OS_PLATFORM = FW_OS_PLATFORM

class FW_OS_PLATFORM_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_OS_PLATFORM, "pPlatforms"),]

    
PFW_OS_PLATFORM_LIST = FW_OS_PLATFORM_LIST

class FW_NETWORK_NAMES(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PLPWSTR, "wszNames"),]

    
PFW_NETWORK_NAMES = FW_NETWORK_NAMES

class FW_RULE_ORIGIN_TYPE(NdrEnum):
    MAP = ((0 , 'FW_RULE_ORIGIN_INVALID'),(1 , 'FW_RULE_ORIGIN_LOCAL'),(2 , 'FW_RULE_ORIGIN_GP'),(3 , 'FW_RULE_ORIGIN_DYNAMIC'),(4 , 'FW_RULE_ORIGIN_AUTOGEN'),(5 , 'FW_RULE_ORIGIN_HARDCODED'),(6 , 'FW_RULE_ORIGIN_MAX'),)        

class FW_ENUM_RULES_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_ENUM_RULES_FLAG_NONE'),(1 , 'FW_ENUM_RULES_FLAG_RESOLVE_NAME'),(2 , 'FW_ENUM_RULES_FLAG_RESOLVE_DESCRIPTION'),(4 , 'FW_ENUM_RULES_FLAG_RESOLVE_APPLICATION'),(8 , 'FW_ENUM_RULES_FLAG_RESOLVE_KEYWORD'),(16 , 'FW_ENUM_RULES_FLAG_RESOLVE_GPO_NAME'),(32 , 'FW_ENUM_RULES_FLAG_EFFECTIVE'),(64 , 'FW_ENUM_RULES_FLAG_INCLUDE_METADATA'),(128 , 'FW_ENUM_RULES_FLAG_MAX'),)        

class FW_RULE_ACTION(NdrEnum):
    MAP = ((0 , 'FW_RULE_ACTION_INVALID'),(1 , 'FW_RULE_ACTION_ALLOW_BYPASS'),(2 , 'FW_RULE_ACTION_BLOCK'),(3 , 'FW_RULE_ACTION_ALLOW'),(4 , 'FW_RULE_ACTION_MAX'),)        

class FW_RULE_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_RULE_FLAGS_NONE'),(1 , 'FW_RULE_FLAGS_ACTIVE'),(2 , 'FW_RULE_FLAGS_AUTHENTICATE'),(4 , 'FW_RULE_FLAGS_AUTHENTICATE_WITH_ENCRYPTION'),(8 , 'FW_RULE_FLAGS_ROUTEABLE_ADDRS_TRAVERSE'),(16 , 'FW_RULE_FLAGS_LOOSE_SOURCE_MAPPED'),(32 , 'FW_RULE_FLAGS_MAX_V2_1'),(32 , 'FW_RULE_FLAGS_AUTH_WITH_NO_ENCAPSULATION'),(64 , 'FW_RULE_FLAGS_MAX_V2_9'),(64 , 'FW_RULE_FLAGS_AUTH_WITH_ENC_NEGOTIATE'),(128 , 'FW_RULE_FLAGS_ROUTEABLE_ADDRS_TRAVERSE_DEFER_APP'),(256 , 'FW_RULE_FLAGS_ROUTEABLE_ADDRS_TRAVERSE_DEFER_USER'),(512 , 'FW_RULE_FLAGS_AUTHENTICATE_BYPASS_OUTBOUND'),(1024 , 'FW_RULE_FLAGS_MAX_V2_10'),(1024 , 'FW_RULE_FLAGS_ALLOW_PROFILE_CROSSING'),(2048 , 'FW_RULE_FLAGS_LOCAL_ONLY_MAPPED'),(4096 , 'FW_RULE_FLAGS_MAX_V2_20'),(4096 , 'FW_RULE_FLAGS_LUA_CONDITIONAL_ACE'),(8192 , 'FW_RULE_FLAGS_BIND_TO_INTERFACE'),(16384 , 'FW_RULE_FLAGS_MAX'),)        

class FW_RULE_FLAGS2(NdrEnum):
    MAP = ((0 , 'FW_RULE_FLAGS2_NONE'),(1 , 'FW_RULE_FLAGS2_SYSTEMOS_ONLY'),(2 , 'FW_RULE_FLAGS2_GAMEOS_ONLY'),(4 , 'FW_RULE_FLAGS2_DEVMODE'),(8 , 'FW_RULE_FLAGS_MAX_V2_26'),(8 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_8'),(16 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_16'),(32 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_32'),(64 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_64'),(128 , 'FW_RULE_FLAGS2_CALLOUT_AND_AUDIT'),(256 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_256'),(512 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_512'),(1024 , 'FW_RULE_FLAGS2_NOT_USED_VALUE_1024'),(2048 , 'FW_RULE_FLAGS2_MAX'),)        

class FW_RULE2_0(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(PWCHAR, "wszRuleId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(PWCHAR, "wszLocalApplication"),(PWCHAR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(PWCHAR, "wszRemoteMachineAuthorizationList"),(PWCHAR, "wszRemoteUserAuthorizationList"),(PWCHAR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(DWORD, "Reserved"),]

    
PFW_RULE2_0 = FW_RULE2_0

class FW_RULE2_10(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(LPWSTR, "wszRuleId"),(LPWSTR, "wszName"),(LPWSTR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(LPWSTR, "wszLocalApplication"),(LPWSTR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(LPWSTR, "wszRemoteMachineAuthorizationList"),(LPWSTR, "wszRemoteUserAuthorizationList"),(LPWSTR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(LPWSTR, "wszGPOName"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),]

    
PFW_RULE2_10 = FW_RULE2_10

class FW_RULE2_20(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(LPWSTR, "wszRuleId"),(LPWSTR, "wszName"),(LPWSTR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(LPWSTR, "wszLocalApplication"),(LPWSTR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(LPWSTR, "wszRemoteMachineAuthorizationList"),(LPWSTR, "wszRemoteUserAuthorizationList"),(LPWSTR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(LPWSTR, "wszGPOName"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszLocalUserAuthorizationList"),(PWCHAR, "wszPackageId"),(PWCHAR, "wszLocalUserOwner"),(DWORD, "dwTrustTupleKeywords"),]

    
PFW_RULE2_20 = FW_RULE2_20

class FW_RULE2_24(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(LPWSTR, "wszRuleId"),(LPWSTR, "wszName"),(LPWSTR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(LPWSTR, "wszLocalApplication"),(LPWSTR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(LPWSTR, "wszRemoteMachineAuthorizationList"),(LPWSTR, "wszRemoteUserAuthorizationList"),(LPWSTR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(LPWSTR, "wszGPOName"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszLocalUserAuthorizationList"),(PWCHAR, "wszPackageId"),(PWCHAR, "wszLocalUserOwner"),(DWORD, "dwTrustTupleKeywords"),(FW_NETWORK_NAMES, "OnNetworkNames"),(PWCHAR, "wszSecurityRealmId"),]

    
PFW_RULE2_24 = FW_RULE2_24

class FW_RULE2_25(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(LPWSTR, "wszRuleId"),(LPWSTR, "wszName"),(LPWSTR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(LPWSTR, "wszLocalApplication"),(LPWSTR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(LPWSTR, "wszRemoteMachineAuthorizationList"),(LPWSTR, "wszRemoteUserAuthorizationList"),(LPWSTR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(LPWSTR, "wszGPOName"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszLocalUserAuthorizationList"),(PWCHAR, "wszPackageId"),(PWCHAR, "wszLocalUserOwner"),(DWORD, "dwTrustTupleKeywords"),(FW_NETWORK_NAMES, "OnNetworkNames"),(PWCHAR, "wszSecurityRealmId"),(WORD, "wFlags2"),]

    
PFW_RULE2_25 = FW_RULE2_25

class FW_RULE2_26(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(LPWSTR, "wszRuleId"),(LPWSTR, "wszName"),(LPWSTR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(LPWSTR, "wszLocalApplication"),(LPWSTR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(LPWSTR, "wszRemoteMachineAuthorizationList"),(LPWSTR, "wszRemoteUserAuthorizationList"),(LPWSTR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(LPWSTR, "wszGPOName"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszLocalUserAuthorizationList"),(PWCHAR, "wszPackageId"),(PWCHAR, "wszLocalUserOwner"),(DWORD, "dwTrustTupleKeywords"),(FW_NETWORK_NAMES, "OnNetworkNames"),(PWCHAR, "wszSecurityRealmId"),(WORD, "wFlags2"),(FW_NETWORK_NAMES, "RemoteOutServerNames"),]

    
PFW_RULE2_26 = FW_RULE2_26

class FW_RULE2_27(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(UNSIGNED_SHORT, "wSchemaVersion"),(PWCHAR_T, "wszRuleId"),(PWCHAR_T, "wszName"),(PWCHAR_T, "wszDescription"),(UNSIGNED_LONG, "dwProfiles"),(FW_DIRECTION, "Direction"),(UNSIGNED_SHORT, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(UNSIGNED_LONG, "dwLocalInterfaceTypes"),(PWCHAR_T, "wszLocalApplication"),(PWCHAR_T, "wszLocalService"),(FW_RULE_ACTION, "Action"),(UNSIGNED_SHORT, "wFlags"),(PWCHAR_T, "wszRemoteMachineAuthorizationList"),(PWCHAR_T, "wszRemoteUserAuthorizationList"),(PWCHAR_T, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR_T, "wszGPOName"),(UNSIGNED_LONG, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszLocalUserAuthorizationList"),(PWCHAR, "wszPackageId"),(PWCHAR, "wszLocalUserOwner"),(UNSIGNED_LONG, "dwTrustTupleKeywords"),(FW_NETWORK_NAMES, "OnNetworkNames"),(PWCHAR, "wszSecurityRealmId"),(UNSIGNED_SHORT, "wFlags2"),(FW_NETWORK_NAMES, "RemoteOutServerNames"),(PWCHAR, "wszFqbn"),(UNSIGNED_LONG, "compartmentId"),]

    
PFW_RULE2_27 = FW_RULE2_27

class FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST(NdrStructure):
    MEMBERS = [(DWORD, "dwNumIds"),(PUINT32, "ids"),]

    
PFW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST = FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST

class FW_RULE(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(LPWSTR, "wszRuleId"),(LPWSTR, "wszName"),(LPWSTR, "wszDescription"),(DWORD, "dwProfiles"),(FW_DIRECTION, "Direction"),(WORD, "wIpProtocol"),(U0, "u0"),(FW_ADDRESSES, "LocalAddresses"),(FW_ADDRESSES, "RemoteAddresses"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(LPWSTR, "wszLocalApplication"),(LPWSTR, "wszLocalService"),(FW_RULE_ACTION, "Action"),(WORD, "wFlags"),(LPWSTR, "wszRemoteMachineAuthorizationList"),(LPWSTR, "wszRemoteUserAuthorizationList"),(LPWSTR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_STATUS, "Status"),(FW_RULE_ORIGIN_TYPE, "Origin"),(LPWSTR, "wszGPOName"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszLocalUserAuthorizationList"),(PWCHAR, "wszPackageId"),(PWCHAR, "wszLocalUserOwner"),(DWORD, "dwTrustTupleKeywords"),(FW_NETWORK_NAMES, "OnNetworkNames"),(PWCHAR, "wszSecurityRealmId"),(WORD, "wFlags2"),(FW_NETWORK_NAMES, "RemoteOutServerNames"),(PWCHAR, "wszFqbn"),(DWORD, "compartmentId"),(GUID, "providerContextKey"),(FW_DYNAMIC_KEYWORD_ADDRESS_ID_LIST, "RemoteDynamicKeywordAddresses"),]

    
PFW_RULE = FW_RULE

class FW_PROFILE_CONFIG(NdrEnum):
    MAP = ((0 , 'FW_PROFILE_CONFIG_INVALID'),(1 , 'FW_PROFILE_CONFIG_ENABLE_FW'),(2 , 'FW_PROFILE_CONFIG_DISABLE_STEALTH_MODE'),(3 , 'FW_PROFILE_CONFIG_SHIELDED'),(4 , 'FW_PROFILE_CONFIG_DISABLE_UNICAST_RESPONSES_TO_MULTICAST_BROADCAST'),(5 , 'FW_PROFILE_CONFIG_LOG_DROPPED_PACKETS'),(6 , 'FW_PROFILE_CONFIG_LOG_SUCCESS_CONNECTIONS'),(7 , 'FW_PROFILE_CONFIG_LOG_IGNORED_RULES'),(8 , 'FW_PROFILE_CONFIG_LOG_MAX_FILE_SIZE'),(9 , 'FW_PROFILE_CONFIG_LOG_FILE_PATH'),(10 , 'FW_PROFILE_CONFIG_DISABLE_INBOUND_NOTIFICATIONS'),(11 , 'FW_PROFILE_CONFIG_AUTH_APPS_ALLOW_USER_PREF_MERGE'),(12 , 'FW_PROFILE_CONFIG_GLOBAL_PORTS_ALLOW_USER_PREF_MERGE'),(13 , 'FW_PROFILE_CONFIG_ALLOW_LOCAL_POLICY_MERGE'),(14 , 'FW_PROFILE_CONFIG_ALLOW_LOCAL_IPSEC_POLICY_MERGE'),(15 , 'FW_PROFILE_CONFIG_DISABLED_INTERFACES'),(16 , 'FW_PROFILE_CONFIG_DEFAULT_OUTBOUND_ACTION'),(17 , 'FW_PROFILE_CONFIG_DEFAULT_INBOUND_ACTION'),(18 , 'FW_PROFILE_CONFIG_DISABLE_STEALTH_MODE_IPSEC_SECURED_PACKET_EXEMPTION'),(19 , 'FW_PROFILE_CONFIG_MAX'),)        

class FW_GLOBAL_CONFIG_IPSEC_EXEMPT_VALUES(NdrEnum):
    MAP = ((0 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NONE'),(1 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NEIGHBOR_DISC'),(2 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ICMP'),(4 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ROUTER_DISC'),(FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ROUTER_DISC , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NEIGHBOR_DISC_RFC'),(8 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_DHCP'),(16 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT_MAX'),)        

class FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_VALUES(NdrEnum):
    MAP = ((0 , 'FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_NONE'),(1 , 'FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_UTF_8'),(2 , 'FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_MAX'),)        

class FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_VALUES(NdrEnum):
    MAP = ((0 , 'FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_NEVER'),(1 , 'FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_SERVER_BEHIND_NAT'),(2 , 'FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_SERVER_AND_CLIENT_BEHIND_NAT'),(3 , 'FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT_MAX'),)        

class FW_GLOBAL_CONFIG_ENABLE_PACKET_QUEUE_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_GLOBAL_CONFIG_PACKET_QUEUE_NONE'),(1 , 'FW_GLOBAL_CONFIG_PACKET_QUEUE_INBOUND'),(2 , 'FW_GLOBAL_CONFIG_PACKET_QUEUE_FORWARD'),(3 , 'FW_GLOBAL_CONFIG_PACKET_QUEUE_MAX'),)        

class FW_GLOBAL_CONFIG(NdrEnum):
    MAP = ((0 , 'FW_GLOBAL_CONFIG_INVALID'),(1 , 'FW_GLOBAL_CONFIG_POLICY_VERSION_SUPPORTED'),(2 , 'FW_GLOBAL_CONFIG_CURRENT_PROFILE'),(3 , 'FW_GLOBAL_CONFIG_DISABLE_STATEFUL_FTP'),(4 , 'FW_GLOBAL_CONFIG_DISABLE_STATEFUL_PPTP'),(5 , 'FW_GLOBAL_CONFIG_SA_IDLE_TIME'),(6 , 'FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING'),(7 , 'FW_GLOBAL_CONFIG_IPSEC_EXEMPT'),(8 , 'FW_GLOBAL_CONFIG_CRL_CHECK'),(9 , 'FW_GLOBAL_CONFIG_IPSEC_THROUGH_NAT'),(10 , 'FW_GLOBAL_CONFIG_POLICY_VERSION'),(11 , 'FW_GLOBAL_CONFIG_BINARY_VERSION_SUPPORTED'),(12 , 'FW_GLOBAL_CONFIG_IPSEC_TUNNEL_REMOTE_MACHINE_AUTHORIZATION_LIST'),(13 , 'FW_GLOBAL_CONFIG_IPSEC_TUNNEL_REMOTE_USER_AUTHORIZATION_LIST'),(14 , 'FW_GLOBAL_CONFIG_OPPORTUNISTICALLY_MATCH_AUTH_SET_PER_KM'),(15 , 'FW_GLOBAL_CONFIG_IPSEC_TRANSPORT_REMOTE_MACHINE_AUTHORIZATION_LIST'),(16 , 'FW_GLOBAL_CONFIG_IPSEC_TRANSPORT_REMOTE_USER_AUTHORIZATION_LIST'),(17 , 'FW_GLOBAL_CONFIG_ENABLE_PACKET_QUEUE'),(18 , 'FW_GLOBAL_CONFIG_MAX'),)        

class FW_CONFIG_FLAGS(NdrEnum):
    MAP = ((1 , 'FW_CONFIG_FLAG_RETURN_DEFAULT_IF_NOT_FOUND'),)        

class FW_NETWORK(NdrStructure):
    MEMBERS = [(PWCHAR_T, "pszName"),(FW_PROFILE_TYPE, "ProfileType"),]

    
PFW_NETWORK = FW_NETWORK

class FW_ADAPTER(NdrStructure):
    MEMBERS = [(PWCHAR_T, "pszFriendlyName"),(GUID, "Guid"),]

    
PFW_ADAPTER = FW_ADAPTER

class FW_DIAG_APP(NdrStructure):
    MEMBERS = [(PWCHAR_T, "pszAppPath"),]

    
PFW_DIAG_APP = FW_DIAG_APP

class FW_RULE_CATEGORY(NdrEnum):
    MAP = ((0 , 'FW_RULE_CATEGORY_BOOT'),(1 , 'FW_RULE_CATEGORY_STEALTH'),(2 , 'FW_RULE_CATEGORY_FIREWALL'),(3 , 'FW_RULE_CATEGORY_CONSEC'),(4 , 'FW_RULE_CATEGORY_MAX'),)        

class FW_PRODUCT(NdrStructure):
    MEMBERS = [(DWORD, "dwFlags"),(DWORD, "dwNumRuleCategories"),(PFW_RULE_CATEGORY, "pRuleCategories"),(PWCHAR_T, "pszDisplayName"),(PWCHAR_T, "pszPathToSignedProductExe"),]

    
PFW_PRODUCT = FW_PRODUCT

class FW_IP_VERSION(NdrEnum):
    MAP = ((0 , 'FW_IP_VERSION_INVALID'),(1 , 'FW_IP_VERSION_V4'),(2 , 'FW_IP_VERSION_V6'),(3 , 'FW_IP_VERSION_MAX'),)        

class FW_IPSEC_PHASE(NdrEnum):
    MAP = ((0 , 'FW_IPSEC_PHASE_INVALID'),(1 , 'FW_IPSEC_PHASE_1'),(2 , 'FW_IPSEC_PHASE_2'),(3 , 'FW_IPSEC_PHASE_MAX'),)        

class FW_CS_RULE_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_CS_RULE_FLAGS_NONE'),(1 , 'FW_CS_RULE_FLAGS_ACTIVE'),(2 , 'FW_CS_RULE_FLAGS_DTM'),(8 , 'FW_CS_RULE_FLAGS_TUNNEL_BYPASS_IF_ENCRYPTED'),(16 , 'FW_CS_RULE_FLAGS_OUTBOUND_CLEAR'),(32 , 'FW_CS_RULE_FLAGS_APPLY_AUTHZ'),(64 , 'FW_CS_RULE_FLAGS_KEY_MANAGER_ALLOW_DICTATE_KEY'),(128 , 'FW_CS_RULE_FLAGS_KEY_MANAGER_ALLOW_NOTIFY_KEY'),(256 , 'FW_CS_RULE_FLAGS_SECURITY_REALM'),(512 , 'FW_CS_RULE_FLAGS_MAX'),(2 , 'FW_CS_RULE_FLAGS_MAX_V2_1'),(4 , 'FW_CS_RULE_FLAGS_MAX_V2_8'),(64 , 'FW_CS_RULE_FLAGS_MAX_V2_10'),(256 , 'FW_CS_RULE_FLAGS_MAX_V2_20'),)        

class FW_CS_RULE_ACTION(NdrEnum):
    MAP = ((0 , 'FW_CS_RULE_ACTION_INVALID'),(1 , 'FW_CS_RULE_ACTION_SECURE_SERVER'),(2 , 'FW_CS_RULE_ACTION_BOUNDARY'),(3 , 'FW_CS_RULE_ACTION_SECURE'),(4 , 'FW_CS_RULE_ACTION_DO_NOT_SECURE'),(5 , 'FW_CS_RULE_ACTION_MAX'),)        

class FW_CS_RULE2_0(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(PWCHAR, "wszRuleId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(DWORD, "dwProfiles"),(FW_ADDRESSES, "Endpoint1"),(FW_ADDRESSES, "Endpoint2"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(DWORD, "dwLocalTunnelEndpointV4"),(BYTE, "LocalTunnelEndpointV6"),(DWORD, "dwRemoteTunnelEndpointV4"),(BYTE, "RemoteTunnelEndpointV6"),(FW_PORTS, "Endpoint1Ports"),(FW_PORTS, "Endpoint2Ports"),(WORD, "wIpProtocol"),(PWCHAR, "wszPhase1AuthSet"),(PWCHAR, "wszPhase2CryptoSet"),(PWCHAR, "wszPhase2AuthSet"),(FW_CS_RULE_ACTION, "Action"),(WORD, "wFlags"),(PWCHAR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),]

    
PFW_CS_RULE2_0 = FW_CS_RULE2_0

class FW_KEY_MODULE(NdrEnum):
    MAP = ((0 , 'FW_KEY_MODULE_DEFAULT'),(1 , 'FW_KEY_MODULE_IKEv1'),(2 , 'FW_KEY_MODULE_AUTHIP'),(4 , 'FW_KEY_MODULE_IKEv2'),(8 , 'FW_KEY_MODULE_MAX'),)        

class FW_CS_RULE2_10(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(PWCHAR, "wszRuleId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(DWORD, "dwProfiles"),(FW_ADDRESSES, "Endpoint1"),(FW_ADDRESSES, "Endpoint2"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(DWORD, "dwLocalTunnelEndpointV4"),(BYTE, "LocalTunnelEndpointV6"),(DWORD, "dwRemoteTunnelEndpointV4"),(BYTE, "RemoteTunnelEndpointV6"),(FW_PORTS, "Endpoint1Ports"),(FW_PORTS, "Endpoint2Ports"),(WORD, "wIpProtocol"),(PWCHAR, "wszPhase1AuthSet"),(PWCHAR, "wszPhase2CryptoSet"),(PWCHAR, "wszPhase2AuthSet"),(FW_CS_RULE_ACTION, "Action"),(WORD, "wFlags"),(PWCHAR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),(PWCHAR, "wszMMParentRuleId"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),]

    
PFW_CS_RULE2_10 = FW_CS_RULE2_10

class FW_CS_RULE(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(PWCHAR, "wszRuleId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(DWORD, "dwProfiles"),(FW_ADDRESSES, "Endpoint1"),(FW_ADDRESSES, "Endpoint2"),(FW_INTERFACE_LUIDS, "LocalInterfaceIds"),(DWORD, "dwLocalInterfaceTypes"),(DWORD, "dwLocalTunnelEndpointV4"),(BYTE, "LocalTunnelEndpointV6"),(DWORD, "dwRemoteTunnelEndpointV4"),(BYTE, "RemoteTunnelEndpointV6"),(FW_PORTS, "Endpoint1Ports"),(FW_PORTS, "Endpoint2Ports"),(WORD, "wIpProtocol"),(PWCHAR, "wszPhase1AuthSet"),(PWCHAR, "wszPhase2CryptoSet"),(PWCHAR, "wszPhase2AuthSet"),(FW_CS_RULE_ACTION, "Action"),(WORD, "wFlags"),(PWCHAR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),(PWCHAR, "wszMMParentRuleId"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),(PWCHAR, "wszRemoteTunnelEndpointFqdn"),(FW_ADDRESSES, "RemoteTunnelEndpoints"),(DWORD, "dwKeyModules"),(DWORD, "FwdPathSALifetime"),(LPWSTR, "wszTransportMachineAuthzSDDL"),(LPWSTR, "wszTransportUserAuthzSDDL"),]

    
PFW_CS_RULE = FW_CS_RULE

class FW_AUTH_METHOD(NdrEnum):
    MAP = ((0 , 'FW_AUTH_METHOD_INVALID'),(1 , 'FW_AUTH_METHOD_ANONYMOUS'),(2 , 'FW_AUTH_METHOD_MACHINE_KERB'),(3 , 'FW_AUTH_METHOD_MACHINE_SHKEY'),(4 , 'FW_AUTH_METHOD_MACHINE_NTLM'),(5 , 'FW_AUTH_METHOD_MACHINE_CERT'),(6 , 'FW_AUTH_METHOD_USER_KERB'),(7 , 'FW_AUTH_METHOD_USER_CERT'),(8 , 'FW_AUTH_METHOD_USER_NTLM'),(9 , 'FW_AUTH_METHOD_MACHINE_RESERVED'),(10 , 'FW_AUTH_METHOD_USER_RESERVED'),(11 , 'FW_AUTH_METHOD_MAX'),(1) , 'FW_AUTH_METHOD_MAX_2_10'),)        

class FW_AUTH_SUITE_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_AUTH_SUITE_FLAGS_NONE'),(1 , 'FW_AUTH_SUITE_FLAGS_CERT_EXCLUDE_CA_NAME'),(2 , 'FW_AUTH_SUITE_FLAGS_HEALTH_CERT'),(4 , 'FW_AUTH_SUITE_FLAGS_PERFORM_CERT_ACCOUNT_MAPPING'),(8 , 'FW_AUTH_SUITE_FLAGS_CERT_SIGNING_ECDSA256'),(16 , 'FW_AUTH_SUITE_FLAGS_CERT_SIGNING_ECDSA384'),(32 , 'FW_AUTH_SUITE_FLAGS_MAX_V2_1'),(32 , 'FW_AUTH_SUITE_FLAGS_INTERMEDIATE_CA'),(64 , 'FW_AUTH_SUITE_FLAGS_MAX_V2_10'),(64 , 'FW_AUTH_SUITE_FLAGS_ALLOW_PROXY'),(128 , 'FW_AUTH_SUITE_FLAGS_MAX'),)        

class FW_AUTH_SUITE2_10(NdrStructure):
    MEMBERS = [(FW_AUTH_METHOD, "Method"),(WORD, "wFlags"),(U0, "u0"),]

    
PFW_AUTH_SUITE2_10 = FW_AUTH_SUITE2_10

class FW_CERT_CRITERIA_NAME_TYPE(NdrEnum):
    MAP = ((0 , 'FW_CERT_CRITERIA_NAME_NONE'),(1 , 'FW_CERT_CRITERIA_NAME_DNS'),(2 , 'FW_CERT_CRITERIA_NAME_UPN'),(3 , 'FW_CERT_CRITERIA_NAME_RFC822'),(4 , 'FW_CERT_CRITERIA_NAME_CN'),(5 , 'FW_CERT_CRITERIA_NAME_OU'),(6 , 'FW_CERT_CRITERIA_NAME_O'),(7 , 'FW_CERT_CRITERIA_NAME_DC'),(8 , 'FW_CERT_CRITERIA_NAME_MAX'),)        

class FW_CERT_CRITERIA_TYPE(NdrEnum):
    MAP = ((0 , 'FW_CERT_CRITERIA_TYPE_BOTH'),(1 , 'FW_CERT_CRITERIA_TYPE_SELECTION'),(2 , 'FW_CERT_CRITERIA_TYPE_VALIDATION'),(3 , 'FW_CERT_CRITERIA_TYPE_MAX'),)        

class FW_AUTH_CERT_CRITERIA_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_AUTH_CERT_CRITERIA_FLAGS_NONE'),(1 , 'FW_AUTH_CERT_CRITERIA_FLAGS_FOLLOW_RENEWAL'),(2 , 'FW_AUTH_CERT_CRITERIA_FLAGS_MAX'),)        

class FW_CERT_CRITERIA(NdrStructure):
    MEMBERS = [(WORD, "wSchemaVersion"),(WORD, "wFlags"),(FW_CERT_CRITERIA_TYPE, "CertCriteriaType"),(FW_CERT_CRITERIA_NAME_TYPE, "NameType"),(LPWSTR, "wszName"),(DWORD, "dwNumEku"),(PLPSTR, "ppEku"),(LPWSTR, "wszHash"),]

    
PFW_CERT_CRITERIA = FW_CERT_CRITERIA

class FW_AUTH_SUITE(NdrStructure):
    MEMBERS = [(FW_AUTH_METHOD, "Method"),(WORD, "wFlags"),(U0, "u0"),]

    
PFW_AUTH_SUITE = FW_AUTH_SUITE

class FW_AUTH_SET_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_AUTH_SET_FLAGS_NONE'),(1 , 'FW_AUTH_SET_FLAGS_MAX'),)        

class FW_AUTH_SET2_10(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(FW_IPSEC_PHASE, "IpSecPhase"),(PWCHAR, "wszSetId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(PWCHAR, "wszEmbeddedContext"),(DWORD, "dwNumSuites"),(PFW_AUTH_SUITE2_10, "pSuites"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),(DWORD, "dwAuthSetFlags"),]

    
PFW_AUTH_SET2_10 = FW_AUTH_SET2_10

class FW_AUTH_SET(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(FW_IPSEC_PHASE, "IpSecPhase"),(PWCHAR, "wszSetId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(PWCHAR, "wszEmbeddedContext"),(DWORD, "dwNumSuites"),(PFW_AUTH_SUITE, "pSuites"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),(DWORD, "dwAuthSetFlags"),]

    
PFW_AUTH_SET = FW_AUTH_SET

class FW_CRYPTO_KEY_EXCHANGE_TYPE(NdrEnum):
    MAP = ((0 , 'FW_CRYPTO_KEY_EXCHANGE_NONE'),(1 , 'FW_CRYPTO_KEY_EXCHANGE_DH1'),(2 , 'FW_CRYPTO_KEY_EXCHANGE_DH2'),(3 , 'FW_CRYPTO_KEY_EXCHANGE_ECDH256'),(4 , 'FW_CRYPTO_KEY_EXCHANGE_ECDH384'),(5 , 'FW_CRYPTO_KEY_EXCHANGE_DH2048'),(6 , 'FW_CRYPTO_KEY_EXCHANGE_DH24'),(7 , 'FW_CRYPTO_KEY_EXCHANGE_MAX'),(FW_CRYPTO_KEY_EXCHANGE_DH2048 , 'FW_CRYPTO_KEY_EXCHANGE_DH14'),(FW_CRYPTO_KEY_EXCHANGE_DH24 , 'FW_CRYPTO_KEY_EXCHANGE_MAX_V2_10'),)        

class FW_CRYPTO_ENCRYPTION_TYPE(NdrEnum):
    MAP = ((0 , 'FW_CRYPTO_ENCRYPTION_NONE'),(1 , 'FW_CRYPTO_ENCRYPTION_DES'),(2 , 'FW_CRYPTO_ENCRYPTION_3DES'),(3 , 'FW_CRYPTO_ENCRYPTION_AES128'),(4 , 'FW_CRYPTO_ENCRYPTION_AES192'),(5 , 'FW_CRYPTO_ENCRYPTION_AES256'),(6 , 'FW_CRYPTO_ENCRYPTION_AES_GCM128'),(7 , 'FW_CRYPTO_ENCRYPTION_AES_GCM192'),(8 , 'FW_CRYPTO_ENCRYPTION_AES_GCM256'),(9 , 'FW_CRYPTO_ENCRYPTION_MAX'),(FW_CRYPTO_ENCRYPTION_AES_GCM128 , 'FW_CRYPTO_ENCRYPTION_MAX_V2_0'),)        

class FW_CRYPTO_HASH_TYPE(NdrEnum):
    MAP = ((0 , 'FW_CRYPTO_HASH_NONE'),(1 , 'FW_CRYPTO_HASH_MD5'),(2 , 'FW_CRYPTO_HASH_SHA1'),(3 , 'FW_CRYPTO_HASH_SHA256'),(4 , 'FW_CRYPTO_HASH_SHA384'),(5 , 'FW_CRYPTO_HASH_AES_GMAC128'),(6 , 'FW_CRYPTO_HASH_AES_GMAC192'),(7 , 'FW_CRYPTO_HASH_AES_GMAC256'),(8 , 'FW_CRYPTO_HASH_MAX'),(FW_CRYPTO_HASH_SHA256 , 'FW_CRYPTO_HASH_MAX_V2_0'),)        

class FW_CRYPTO_PROTOCOL_TYPE(NdrEnum):
    MAP = ((0 , 'FW_CRYPTO_PROTOCOL_INVALID'),(1 , 'FW_CRYPTO_PROTOCOL_AH'),(2 , 'FW_CRYPTO_PROTOCOL_ESP'),(3 , 'FW_CRYPTO_PROTOCOL_BOTH'),(4 , 'FW_CRYPTO_PROTOCOL_AUTH_NO_ENCAP'),(5 , 'FW_CRYPTO_PROTOCOL_MAX'),(1) , 'FW_CRYPTO_PROTOCOL_MAX_2_1'),)        

class FW_CRYPTO_SET_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_CRYPTO_SET_FLAGS_NONE'),(1 , 'FW_CRYPTO_SET_FLAGS_MAX'),)        

class FW_PHASE1_CRYPTO_SUITE(NdrStructure):
    MEMBERS = [(FW_CRYPTO_KEY_EXCHANGE_TYPE, "KeyExchange"),(FW_CRYPTO_ENCRYPTION_TYPE, "Encryption"),(FW_CRYPTO_HASH_TYPE, "Hash"),(DWORD, "dwP1CryptoSuiteFlags"),]

    
PFW_PHASE1_CRYPTO_SUITE = FW_PHASE1_CRYPTO_SUITE

class FW_PHASE2_CRYPTO_SUITE(NdrStructure):
    MEMBERS = [(FW_CRYPTO_PROTOCOL_TYPE, "Protocol"),(FW_CRYPTO_HASH_TYPE, "AhHash"),(FW_CRYPTO_HASH_TYPE, "EspHash"),(FW_CRYPTO_ENCRYPTION_TYPE, "Encryption"),(DWORD, "dwTimeoutMinutes"),(DWORD, "dwTimeoutKBytes"),(DWORD, "dwP2CryptoSuiteFlags"),]

    
PFW_PHASE2_CRYPTO_SUITE = FW_PHASE2_CRYPTO_SUITE

class FW_PHASE1_CRYPTO_FLAGS(NdrEnum):
    MAP = ((0 , 'FW_PHASE1_CRYPTO_FLAGS_NONE'),(1 , 'FW_PHASE1_CRYPTO_FLAGS_DO_NOT_SKIP_DH'),(2 , 'FW_PHASE1_CRYPTO_FLAGS_MAX'),)        

class FW_PHASE2_CRYPTO_PFS(NdrEnum):
    MAP = ((0 , 'FW_PHASE2_CRYPTO_PFS_INVALID'),(1 , 'FW_PHASE2_CRYPTO_PFS_DISABLE'),(2 , 'FW_PHASE2_CRYPTO_PFS_PHASE1'),(3 , 'FW_PHASE2_CRYPTO_PFS_DH1'),(4 , 'FW_PHASE2_CRYPTO_PFS_DH2'),(5 , 'FW_PHASE2_CRYPTO_PFS_DH2048'),(6 , 'FW_PHASE2_CRYPTO_PFS_ECDH256'),(7 , 'FW_PHASE2_CRYPTO_PFS_ECDH384'),(8 , 'FW_PHASE2_CRYPTO_PFS_DH24'),(9 , 'FW_PHASE2_CRYPTO_PFS_MAX'),(FW_PHASE2_CRYPTO_PFS_DH24 , 'FW_PHASE2_CRYPTO_PFS_MAX_V2_10'),)        

class FW_CRYPTO_SET(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(FW_IPSEC_PHASE, "IpSecPhase"),(PWCHAR, "wszSetId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(PWCHAR, "wszEmbeddedContext"),(U0, "u0"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),(DWORD, "dwCryptoSetFlags"),]

    
PFW_CRYPTO_SET = FW_CRYPTO_SET

class FW_BYTE_BLOB(NdrStructure):
    MEMBERS = [(DWORD, "dwSize"),(PBYTE, "Blob"),]

    
PFW_BYTE_BLOB = FW_BYTE_BLOB

class FW_COOKIE_PAIR(NdrStructure):
    MEMBERS = [(UINT64, "Initiator"),(UINT64, "Responder"),]

    
PFW_COOKIE_PAIR = FW_COOKIE_PAIR

class FW_PHASE1_KEY_MODULE_TYPE(NdrEnum):
    MAP = ((0 , 'FW_PHASE1_KEY_MODULE_INVALID'),(1 , 'FW_PHASE1_KEY_MODULE_IKE'),(2 , 'FW_PHASE1_KEY_MODULE_AUTH_IP'),(3 , 'FW_PHASE1_KEY_MODULE_MAX'),)        

class FW_CERT_INFO(NdrStructure):
    MEMBERS = [(FW_BYTE_BLOB, "SubjectName"),(DWORD, "dwCertFlags"),]

    
PFW_CERT_INFO = FW_CERT_INFO

class FW_AUTH_INFO(NdrStructure):
    MEMBERS = [(FW_AUTH_METHOD, "AuthMethod"),(U0, "u0"),(DWORD, "dwAuthInfoFlags"),]

    
PFW_AUTH_INFO = FW_AUTH_INFO

class FW_ENDPOINTS(NdrStructure):
    MEMBERS = [(FW_IP_VERSION, "IpVersion"),(DWORD, "dwSourceV4Address"),(DWORD, "dwDestinationV4Address"),(BYTE, "SourceV6Address"),(BYTE, "DestinationV6Address"),]

    
PFW_ENDPOINTS = FW_ENDPOINTS

class FW_PHASE1_SA_DETAILS(NdrStructure):
    MEMBERS = [(UINT64, "SaId"),(FW_PHASE1_KEY_MODULE_TYPE, "KeyModuleType"),(FW_ENDPOINTS, "Endpoints"),(FW_PHASE1_CRYPTO_SUITE, "SelectedProposal"),(DWORD, "dwProposalLifetimeKBytes"),(DWORD, "dwProposalLifetimeMinutes"),(DWORD, "dwProposalMaxNumPhase2"),(FW_COOKIE_PAIR, "CookiePair"),(PFW_AUTH_INFO, "pFirstAuth"),(PFW_AUTH_INFO, "pSecondAuth"),(DWORD, "dwP1SaFlags"),]

    
PFW_PHASE1_SA_DETAILS = FW_PHASE1_SA_DETAILS

class FW_PHASE2_TRAFFIC_TYPE(NdrEnum):
    MAP = ((0 , 'FW_PHASE2_TRAFFIC_TYPE_INVALID'),(1 , 'FW_PHASE2_TRAFFIC_TYPE_TRANSPORT'),(2 , 'FW_PHASE2_TRAFFIC_TYPE_TUNNEL'),(3 , 'FW_PHASE2_TRAFFIC_TYPE_MAX'),)        

class FW_PHASE2_SA_DETAILS(NdrStructure):
    MEMBERS = [(UINT64, "SaId"),(FW_DIRECTION, "Direction"),(FW_ENDPOINTS, "Endpoints"),(WORD, "wLocalPort"),(WORD, "wRemotePort"),(WORD, "wIpProtocol"),(FW_PHASE2_CRYPTO_SUITE, "SelectedProposal"),(FW_PHASE2_CRYPTO_PFS, "Pfs"),(GUID, "TransportFilterId"),(DWORD, "dwP2SaFlags"),]

    
PFW_PHASE2_SA_DETAILS = FW_PHASE2_SA_DETAILS

class FW_PROFILE_CONFIG_VALUE(NdrUnion):
    SWITCHTYPE = DWORD
    MEMBERS = {1 : (PWCHAR, "wszStr"),2 : (PFW_INTERFACE_LUIDS, "pDisabledInterfaces"),3 : (PDWORD, "pdwVal"),}

    
PFW_PROFILE_CONFIG_VALUE = FW_PROFILE_CONFIG_VALUE

class FW_MM_RULE(NdrStructure):
    MEMBERS = [(PPNEXT, "*pNext"),(WORD, "wSchemaVersion"),(PWCHAR, "wszRuleId"),(PWCHAR, "wszName"),(PWCHAR, "wszDescription"),(DWORD, "dwProfiles"),(FW_ADDRESSES, "Endpoint1"),(FW_ADDRESSES, "Endpoint2"),(PWCHAR, "wszPhase1AuthSet"),(PWCHAR, "wszPhase1CryptoSet"),(WORD, "wFlags"),(PWCHAR, "wszEmbeddedContext"),(FW_OS_PLATFORM_LIST, "PlatformValidityList"),(FW_RULE_ORIGIN_TYPE, "Origin"),(PWCHAR, "wszGPOName"),(FW_RULE_STATUS, "Status"),(DWORD, "Reserved"),(PFW_OBJECT_METADATA, "pMetaData"),]

    
PFW_MM_RULE = FW_MM_RULE

class FW_MATCH_KEY(NdrEnum):
    MAP = ((0 , 'FW_MATCH_KEY_PROFILE'),(1 , 'FW_MATCH_KEY_STATUS'),(2 , 'FW_MATCH_KEY_OBJECTID'),(3 , 'FW_MATCH_KEY_FILTERID'),(4 , 'FW_MATCH_KEY_APP_PATH'),(5 , 'FW_MATCH_KEY_PROTOCOL'),(6 , 'FW_MATCH_KEY_LOCAL_PORT'),(7 , 'FW_MATCH_KEY_REMOTE_PORT'),(8 , 'FW_MATCH_KEY_GROUP'),(9 , 'FW_MATCH_KEY_SVC_NAME'),(10 , 'FW_MATCH_KEY_DIRECTION'),(11 , 'FW_MATCH_KEY_LOCAL_USER_OWNER'),(12 , 'FW_MATCH_KEY_PACKAGE_ID'),(13 , 'FW_MATCH_KEY_FQBN'),(14 , 'FW_MATCH_KEY_COMPARTMENT_ID'),(15 , 'FW_MATCH_KEY_MAX'),)        

class FW_DATA_TYPE(NdrEnum):
    MAP = ((0 , 'FW_DATA_TYPE_EMPTY'),(1 , 'FW_DATA_TYPE_UINT8'),(2 , 'FW_DATA_TYPE_UINT16'),(3 , 'FW_DATA_TYPE_UINT32'),(4 , 'FW_DATA_TYPE_UINT64'),(5 , 'FW_DATA_TYPE_UNICODE_STRING'),)        

class FW_MATCH_VALUE(NdrStructure):
    MEMBERS = [(FW_DATA_TYPE, "type"),(U0, "u0"),]

    

class FW_MATCH_TYPE(NdrEnum):
    MAP = ((0 , 'FW_MATCH_TYPE_TRAFFIC_MATCH'),(1 , 'FW_MATCH_TYPE_EQUAL'),(2 , 'FW_MATCH_TYPE_MAX'),)        

class FW_QUERY_CONDITION(NdrStructure):
    MEMBERS = [(FW_MATCH_KEY, "matchKey"),(FW_MATCH_TYPE, "matchType"),(FW_MATCH_VALUE, "matchValue"),]

    
PFW_QUERY_CONDITION = FW_QUERY_CONDITION

class FW_QUERY_CONDITIONS(NdrStructure):
    MEMBERS = [(DWORD, "dwNumEntries"),(PFW_QUERY_CONDITION, "AndedConditions"),]

    
PFW_QUERY_CONDITIONS = FW_QUERY_CONDITIONS

class FW_QUERY(NdrStructure):
    MEMBERS = [(WORD, "wSchemaVersion"),(UINT32, "dwNumEntries"),(PFW_QUERY_CONDITIONS, "ORConditions"),(FW_RULE_STATUS, "Status"),]

    
PFW_QUERY = FW_QUERY
FW_CONN_HANDLE = HANDLE_T
FW_POLICY_STORE_HANDLE = HANDLE
PFW_POLICY_STORE_HANDLE = FW_POLICY_STORE_HANDLE
FW_PRODUCT_HANDLE = VOID
Interface("6b5bdd1e-528c-422c-af8c-a4079be4fe48", "1.0",[Method("RRPC_FWOpenPolicyStore",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((WORD,'BinaryVersion')),
In((FW_STORE_TYPE,'StoreType')),
In((FW_POLICY_ACCESS_RIGHT,'AccessRight')),
In((DWORD,'dwFlags')),
Out((PFW_POLICY_STORE_HANDLE,'phPolicyStore')),
),Method("RRPC_FWClosePolicyStore",
In((FW_CONN_HANDLE,'rpcConnHandle')),
InOut((PFW_POLICY_STORE_HANDLE,'phPolicyStore')),
),Method("RRPC_FWRestoreDefaults",
In((FW_CONN_HANDLE,'rpcConnHandle')),
),Method("RRPC_FWGetGlobalConfig",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((WORD,'BinaryVersion')),
In((FW_STORE_TYPE,'StoreType')),
In((FW_GLOBAL_CONFIG,'configID')),
In((DWORD,'dwFlags')),
InOut((PBYTE,'pBuffer')),
In((DWORD,'cbData')),
InOut((LPDWORD,'pcbTransmittedLen')),
Out((LPDWORD,'pcbRequired')),
),Method("RRPC_FWSetGlobalConfig",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((WORD,'BinaryVersion')),
In((FW_STORE_TYPE,'StoreType')),
In((FW_GLOBAL_CONFIG,'configID')),
In((PBYTE,'lpBuffer')),
In((DWORD,'dwBufSize')),
),Method("RRPC_FWAddFirewallRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_0,'pRule')),
),Method("RRPC_FWSetFirewallRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_0,'pRule')),
),Method("RRPC_FWDeleteFirewallRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((LPCWSTR,'wszRuleID')),
),Method("RRPC_FWDeleteAllFirewallRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
),Method("RRPC_FWEnumFirewallRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_0,'ppRules')),
),Method("RRPC_FWGetConfig",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_PROFILE_CONFIG,'configID')),
In((FW_PROFILE_TYPE,'Profile')),
In((DWORD,'dwFlags')),
InOut((PBYTE,'pBuffer')),
In((DWORD,'cbData')),
InOut((LPDWORD,'pcbTransmittedLen')),
Out((LPDWORD,'pcbRequired')),
),Method("RRPC_FWSetConfig",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_PROFILE_CONFIG,'configID')),
In((FW_PROFILE_TYPE,'Profile')),
In((FW_PROFILE_CONFIG_VALUE,'pConfig')),
In((DWORD,'dwBufSize')),
),Method("RRPC_FWAddConnectionSecurityRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CS_RULE2_0,'pRule')),
),Method("RRPC_FWSetConnectionSecurityRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CS_RULE2_0,'pRule')),
),Method("RRPC_FWDeleteConnectionSecurityRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((LPWSTR,'pRuleId')),
),Method("RRPC_FWDeleteAllConnectionSecurityRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
),Method("RRPC_FWEnumConnectionSecurityRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_CS_RULE2_0,'ppRules')),
),Method("RRPC_FWAddAuthenticationSet",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_AUTH_SET2_10,'pAuth')),
),Method("RRPC_FWSetAuthenticationSet",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_AUTH_SET2_10,'pAuth')),
),Method("RRPC_FWDeleteAuthenticationSet",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((LPCWSTR,'wszSetId')),
),Method("RRPC_FWDeleteAllAuthenticationSets",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
),Method("RRPC_FWEnumAuthenticationSets",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((DWORD,'dwFilteredByStatus')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumAuthSets')),
Out((PPFW_AUTH_SET2_10,'ppAuth')),
),Method("RRPC_FWAddCryptoSet",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CRYPTO_SET,'pCrypto')),
),Method("RRPC_FWSetCryptoSet",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CRYPTO_SET,'pCrypto')),
),Method("RRPC_FWDeleteCryptoSet",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((LPCWSTR,'wszSetId')),
),Method("RRPC_FWDeleteAllCryptoSets",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
),Method("RRPC_FWEnumCryptoSets",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((DWORD,'dwFilteredByStatus')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumSets')),
Out((PPFW_CRYPTO_SET,'ppCryptoSets')),
),Method("RRPC_FWEnumPhase1SAs",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_ENDPOINTS,'pEndpoints')),
Out((PDWORD,'pdwNumSAs')),
Out((PPFW_PHASE1_SA_DETAILS,'ppSAs')),
),Method("RRPC_FWEnumPhase2SAs",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_ENDPOINTS,'pEndpoints')),
Out((PDWORD,'pdwNumSAs')),
Out((PPFW_PHASE2_SA_DETAILS,'ppSAs')),
),Method("RRPC_FWDeletePhase1SAs",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_ENDPOINTS,'pEndpoints')),
),Method("RRPC_FWDeletePhase2SAs",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_ENDPOINTS,'pEndpoints')),
),Method("RRPC_FWEnumProducts",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
Out((PDWORD,'pdwNumProducts')),
Out((PPFW_PRODUCT,'ppProducts')),
),Method("RRPC_FWAddMainModeRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_MM_RULE,'pMMRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetMainModeRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_MM_RULE,'pMMRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWDeleteMainModeRule",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((LPWSTR,'pRuleId')),
),Method("RRPC_FWDeleteAllMainModeRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
),Method("RRPC_FWEnumMainModeRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_MM_RULE,'ppMMRules')),
),Method("RRPC_FWQueryFirewallRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_10,'ppRules')),
),Method("RRPC_FWQueryConnectionSecurityRules2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_CS_RULE2_10,'ppRules')),
),Method("RRPC_FWQueryMainModeRules",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_MM_RULE,'ppMMRules')),
),Method("RRPC_FWQueryAuthenticationSets",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IPsecPhase')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumSets')),
Out((PPFW_AUTH_SET2_10,'ppAuthSets')),
),Method("RRPC_FWQueryCryptoSets",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IPsecPhase')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumSets')),
Out((PPFW_CRYPTO_SET,'ppCryptoSets')),
),Method("RRPC_FWEnumNetworks",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
Out((PDWORD,'pdwNumNetworks')),
Out((PPFW_NETWORK,'ppNetworks')),
),Method("RRPC_FWEnumAdapters",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
Out((PDWORD,'pdwNumAdapters')),
Out((PPFW_ADAPTER,'ppAdapters')),
),Method("RRPC_FWGetGlobalConfig2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((WORD,'BinaryVersion')),
In((FW_STORE_TYPE,'StoreType')),
In((FW_GLOBAL_CONFIG,'configID')),
In((DWORD,'dwFlags')),
InOut((PBYTE,'pBuffer')),
In((DWORD,'cbData')),
InOut((LPDWORD,'pcbTransmittedLen')),
Out((LPDWORD,'pcbRequired')),
Out((PFW_RULE_ORIGIN_TYPE,'pOrigin')),
),Method("RRPC_FWGetConfig2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_PROFILE_CONFIG,'configID')),
In((FW_PROFILE_TYPE,'Profile')),
In((DWORD,'dwFlags')),
InOut((PBYTE,'pBuffer')),
In((DWORD,'cbData')),
InOut((LPDWORD,'pcbTransmittedLen')),
Out((LPDWORD,'pcbRequired')),
Out((PFW_RULE_ORIGIN_TYPE,'pOrigin')),
),Method("RRPC_FWAddFirewallRule2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_10,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_10,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_10,'ppRules')),
),Method("RRPC_FWAddConnectionSecurityRule2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CS_RULE2_10,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetConnectionSecurityRule2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CS_RULE2_10,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumConnectionSecurityRules2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_CS_RULE2_10,'ppRules')),
),Method("RRPC_FWAddAuthenticationSet2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_AUTH_SET2_10,'pAuth')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetAuthenticationSet2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_AUTH_SET2_10,'pAuth')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumAuthenticationSets2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((DWORD,'dwFilteredByStatus')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumAuthSets')),
Out((PPFW_AUTH_SET2_10,'ppAuth')),
),Method("RRPC_FWAddCryptoSet2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CRYPTO_SET,'pCrypto')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetCryptoSet2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CRYPTO_SET,'pCrypto')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumCryptoSets2_10",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((DWORD,'dwFilteredByStatus')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumSets')),
Out((PPFW_CRYPTO_SET,'ppCryptoSets')),
),Method("RRPC_FWAddConnectionSecurityRule2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CS_RULE,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetConnectionSecurityRule2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_CS_RULE,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumConnectionSecurityRules2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_CS_RULE,'ppRules')),
),Method("RRPC_FWQueryConnectionSecurityRules2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_CS_RULE,'ppRules')),
),Method("RRPC_FWAddAuthenticationSet2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_AUTH_SET,'pAuth')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetAuthenticationSet2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_AUTH_SET,'pAuth')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumAuthenticationSets2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IpSecPhase')),
In((DWORD,'dwFilteredByStatus')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumAuthSets')),
Out((PPFW_AUTH_SET,'ppAuth')),
),Method("RRPC_FWQueryAuthenticationSets2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((FW_IPSEC_PHASE,'IPsecPhase')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumSets')),
Out((PPFW_AUTH_SET,'ppAuthSets')),
),Method("RRPC_FWAddFirewallRule2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_20,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_20,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_20,'ppRules')),
),Method("RRPC_FWQueryFirewallRules2_20",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_20,'ppRules')),
),Method("RRPC_FWAddFirewallRule2_24",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_24,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_24",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_24,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_24",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_24,'ppRules')),
),Method("RRPC_FWQueryFirewallRules2_24",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_24,'ppRules')),
),Method("RRPC_FWAddFirewallRule2_25",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_25,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_25",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_25,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_25",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_25,'ppRules')),
),Method("RRPC_FWQueryFirewallRules2_25",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_25,'ppRules')),
),Method("RRPC_FWAddFirewallRule2_26",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_26,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_26",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_26,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_26",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_26,'ppRules')),
),Method("RRPC_FWQueryFirewallRules2_26",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_26,'ppRules')),
),Method("RRPC_FWAddFirewallRule2_27",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_27,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_27",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE2_27,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_27",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_27,'ppRules')),
),Method("RRPC_FWQueryFirewallRules2_27",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE2_27,'ppRules')),
),Method("RRPC_FWAddFirewallRule2_31",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWSetFirewallRule2_31",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_RULE,'pRule')),
Out((PFW_RULE_STATUS,'pStatus')),
),Method("RRPC_FWEnumFirewallRules2_31",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((DWORD,'dwFilteredByStatus')),
In((DWORD,'dwProfileFilter')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE,'ppRules')),
),Method("RRPC_FWQueryFirewallRules2_31",
In((FW_CONN_HANDLE,'rpcConnHandle')),
In((FW_POLICY_STORE_HANDLE,'hPolicyStore')),
In((PFW_QUERY,'pQuery')),
In((WORD,'wFlags')),
Out((PDWORD,'pdwNumRules')),
Out((PPFW_RULE,'ppRules')),
),])