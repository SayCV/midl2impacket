
class MidlImport():
    """Represents a MIDL import statement

        Example:
            `import "ms-dtyp.idl";`
    """
    def __init__(self, file):
        self.file = file

    def __str__(self):
        return f"import {self.file}"

class MidlVariableInstantiation():
    """Represents a MIDL variable instantiation
        
        Example:
            `const int MAX_PAYLOAD = 2 * 1024 * 1024;`
    """
    def __init__(self, type, name, rhs, const:bool):
        self.type = type # typing of the variable
        self.name = name # name of the variable
        self.rhs = rhs   # un-parsed righthandside of the statement
        self.const = const # boolean whether it is a constant

    def __str__(self):
        out = ""
        if self.const == True:
            out+="const "
        out += f"{self.type} {self.name} = {self.rhs};"
        return out

class MidlDefinition:
    """Represents a MIDL Definition. Maps directly to a MIDL file
    """
    def __init__(self):
        self.imports = [] # Imports
        self.comments = []
        self.instantiation = [] # Variable instantiation
        self.interfaces = [] # Interface defintions. Usually only 1 per file...
    
    def add_import(self, imp:str):
        self.imports.append(MidlImport(imp))

    def add_instantiation(self, type, name, rhs, const=False):
        self.instantiation.append(MidlVariableInstantiation(type,name,rhs,const))

    def add_interface(self,interface):
        self.interfaces.append(interface)

    def add_comment(self, comment):
        self.comments.append(comment)

    def __str__(self):
        out = ""
        for i in self.imports:
            out+=str(i) + "\n"
        for i in self.instantiation:
            out+=str(i) + "\n"
        for i in self.interfaces:
            out+=str(i) + "\n"
        return out
              

class MidlInterface:
    """Represents a MIDL interface
        
        Truncated example:
            ` [
                uuid (f6beaff7-1e19-4fbb-9f8f-b89e2018337c),
                version(1.0),
                pointer_default(unique)
               ]
                interface IEventService
                {
                    typedef [context_handle] void* PCONTEXT_HANDLE_REMOTE_SUBSCRIPTION;
                    typedef [context_handle] void* PCONTEXT_HANDLE_LOG_QUERY;
                    typedef [context_handle] void* PCONTEXT_HANDLE_LOG_HANDLE;
                    typedef [context_handle] void* PCONTEXT_HANDLE_OPERATION_CONTROL;
                    typedef [context_handle] void* PCONTEXT_HANDLE_PUBLISHER_METADATA;
                    typedef [context_handle] void* PCONTEXT_HANDLE_EVENT_METADATA_ENUM;
                
                
                
                
                
                    typedef struct tag_RpcInfo
                    {
                    DWORD m_error,
                            m_subErr,
                            m_subErrParam;
                    } RpcInfo;
                    error_status_t EvtRpcRegisterRemoteSubscription(
                    /* [in] RPC_BINDING_HANDLE binding, {the binding handle will be generated by MIDL} */
                    [in, unique, range(0, MAX_RPC_CHANNEL_NAME_LENGTH),string] LPCWSTR channelPath,
                    [in, range(1, MAX_RPC_QUERY_LENGTH),string] LPCWSTR query,
                    [in, unique, range(0, MAX_RPC_BOOKMARK_LENGTH),string] LPCWSTR bookmarkXml,
                    [in] DWORD flags,
                    [out, context_handle] PCONTEXT_HANDLE_REMOTE_SUBSCRIPTION* handle,
                    [out, context_handle] PCONTEXT_HANDLE_OPERATION_CONTROL* control,
                    [out] DWORD* queryChannelInfoSize,
                    [out, size_is(,*queryChannelInfoSize),
                        range(0, MAX_RPC_QUERY_CHANNEL_SIZE)]
                            EvtRpcQueryChannelInfo** queryChannelInfo,
                    [out] RpcInfo *error);
                }
            `
    """
    def __init__(self):
        #TODO uuid, version and pointer_default should be in their own class
        self.uuid =  None
        self.version = None
        self.pointer_default = None
        self.name = None
        self.typedefs = []
        self.procedures = []
        self.comments = []

    def add_typedef(self, td):
        self.typedefs.append(td)

    def add_procedure(self, p):
        self.procedures.append(p)
    
    def add_comment(self, c):
        self.comments.append(c)

    def __str__(self):
        out = ""
        out += "UUID: " + self.uuid +";\n"
        out += "Version: " + self.version +";\n"
        out += "interface " + self.name +"{\n"
        for td in self.typedefs:
            out+=str(td)
        for p in self.procedures:
            out+=str(p)
        return out

class MidlAttribute:
    """MIDL Attribute definition
        e.g. size_is(5)
    """
    def __init__(self, name, params=None):
        self.name = name
        self.params = params or []

    def __str__(self):
        out = ""
        out += self.name
        if self.params != []:
            out += "("
            for param in self.params:
                out += str(param)
                out += ", "
            out = out[:-1]
            out+=")"
        return out


class MidlVarDef:
    """Struct member or function parameter
        Example:
            `[size_is(count)] EvtRpcVariant* props;`
    """
    def __init__(self, var_type, name, attrs: list[MidlAttribute] = None):
        self.type = var_type
        self.name = name
        self.attrs = attrs or []

    def __str__(self):
        out = f"{self.type} {self.name};\n"
        return out

class MidlTypeDef:
    """Represents a typedef, can either be a simple mapping, or a complex struct definition.
    """
    def __init__(self, td, attrs):
        self.type = td
        self.name = td.name
        self.attrs = attrs

    def __str__(self):
        out = "typedef "
        out += f"{self.type.__class__.__name__} {self.name};\n"
        return out

class MidlStructDef():
    def __init__(self, public_names, private_name, members: list[MidlVarDef]):
        self.public_names = public_names
        self.private_name = private_name
        self.members = members

class MidlUnionDef():
    def __init__(self, public_names, private_name, members: list[MidlVarDef]):
        self.public_names = public_names
        self.private_name = private_name
        self.members = members

class MidlSimpleTypedef:
    def __init__(self, name, simple_type):
        self.name = name
        self.type = simple_type

class MidlEnumDef:
    """Definition of a MIDL enum.

        Example:
            `
            typedef [v1_enum] enum tag_EvtRpcVariantType
            {
                EvtRpcVarTypeNull = 0,
                EvtRpcVarTypeBoolean,
                EvtRpcVarTypeUInt32,
                EvtRpcVarTypeUInt64,
                EvtRpcVarTypeString,
                EvtRpcVarTypeGuid,
                EvtRpcVarTypeBooleanArray,
                EvtRpcVarTypeUInt32Array,
                EvtRpcVarTypeUInt64Array,
                EvtRpcVarTypeStringArray,
                EvtRpcVarTypeGuidArray
        
            } EvtRpcVariantType;
            `
    """
    def __init__(self, public_names, private_name, map):
        self.public_names = public_names
        self.private_name = private_name
        self.map = map     

    def __str__(self):
        out  = "enum " + self.private_name + f"{self.public_names}" + "\n{\n"
        if self.map is None:
            return ""
        for k in self.map.keys():
            out += k
            if self.map[k] is not None:
                out += " = " + str(self.map[k])
            out +=",\n"
        out += "}\n"
        return out    



class MidlProcedure:
    """MIDL Procedure definition

        Example:
            `     
            error_status_t EvtRpcRemoteSubscriptionWaitAsync(
            [in, context_handle] PCONTEXT_HANDLE_REMOTE_SUBSCRIPTION handle );
            `
    """
    def __init__(self, name, attrs, params):
        self.name = name
        self.attrs = attrs
        self.params = params
    
    def __str__(self):
        out = ""
        out += self.name +" (\n"
        for i in self.params:
            out += str(i)
            out +=",\n"
        
        if len(self.params) >0:
            out = out[:-2] #Trim off the last comma and newline
        out += ");\n"
       
        
        return out

        


class MidlParameter:
    def __init__(self, name=None, data_type=None, attributes: list[MidlAttribute]=None):
        self.name = name
        self.type = data_type
        self.attributes = attributes or []

    def __str__(self):
        out = ""
        has_attrs = len(self.attributes) > 0

        if has_attrs:
            out += "["
            for attr in self.attributes:
                out += str(attr) +","
            out = out[:-1]
            out += "] "
        
        out += self.type + " "
        out += self.name
        return out
